const { User, Message, Friendship } = require("../models");
const { Op } = require("sequelize");
const AchievementManager = require("../utils/achievementManager");

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞
 */
class ChatController {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–¥–∏–∞–ª–æ–≥–æ–≤) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getChats(req, res) {
    try {
      const userId = req.user.id;
      const { page = 1, limit = 20 } = req.query;
      const offset = (page - 1) * limit;

      console.log(`üí¨ Getting chats for user ${userId}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
      const chats = await Message.findAll({
        where: {
          [Op.or]: [{ sender_id: userId }, { receiver_id: userId }],
        },
        include: [
          {
            model: User,
            as: "sender",
            attributes: ["id", "name", "avatar", "level"],
          },
          {
            model: User,
            as: "receiver",
            attributes: ["id", "name", "avatar", "level"],
          },
        ],
        order: [["created_at", "DESC"]],
        limit: parseInt(limit),
        offset: parseInt(offset),
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º
      const chatMap = new Map();

      chats.forEach((message) => {
        const otherUserId =
          message.sender_id === userId
            ? message.receiver_id
            : message.sender_id;

        const otherUser =
          message.sender_id === userId ? message.receiver : message.sender;

        if (!chatMap.has(otherUserId)) {
          chatMap.set(otherUserId, {
            chatId: otherUserId,
            user: otherUser,
            lastMessage: message,
            unreadCount: 0,
          });
        }
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      for (const [otherUserId, chat] of chatMap.entries()) {
        const unreadCount = await Message.count({
          where: {
            sender_id: otherUserId,
            receiver_id: userId,
            is_read: false,
          },
        });
        chat.unreadCount = unreadCount;
      }

      const chatsList = Array.from(chatMap.values());

      res.json({
        success: true,
        data: {
          chats: chatsList,
          pagination: {
            page: parseInt(page),
            limit: parseInt(limit),
            total: chatsList.length,
          },
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  static async getMessages(req, res) {
    try {
      const userId = req.user.id;
      const { otherUserId } = req.params;
      const { page = 1, limit = 50 } = req.query;
      const offset = (page - 1) * limit;

      console.log(`üí¨ Getting messages between ${userId} and ${otherUserId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –¥—Ä—É–∑—å—è–º–∏
      const friendship = await Friendship.findOne({
        where: {
          [Op.or]: [
            { requester_id: userId, addressee_id: otherUserId },
            { requester_id: otherUserId, addressee_id: userId },
          ],
          status: "accepted",
        },
      });

      if (!friendship) {
        return res.status(403).json({
          success: false,
          message: "–ú–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –¥—Ä—É–∑—å—è–º–∏",
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      const messages = await Message.findAndCountAll({
        where: {
          [Op.or]: [
            { sender_id: userId, receiver_id: otherUserId },
            { sender_id: otherUserId, receiver_id: userId },
          ],
        },
        include: [
          {
            model: User,
            as: "sender",
            attributes: ["id", "name", "avatar"],
          },
        ],
        order: [["created_at", "DESC"]],
        limit: parseInt(limit),
        offset: parseInt(offset),
      });

      // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      await Message.update(
        { is_read: true },
        {
          where: {
            sender_id: otherUserId,
            receiver_id: userId,
            is_read: false,
          },
        }
      );

      res.json({
        success: true,
        data: {
          messages: messages.rows.reverse(), // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ
          pagination: {
            page: parseInt(page),
            limit: parseInt(limit),
            total: messages.count,
            totalPages: Math.ceil(messages.count / limit),
          },
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static async sendMessage(req, res) {
    try {
      const senderId = req.user.id;
      const { receiverId, content, messageType = "text" } = req.body;

      console.log(`üí¨ Sending message from ${senderId} to ${receiverId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const receiver = await User.findByPk(receiverId);
      if (!receiver) {
        return res.status(404).json({
          success: false,
          message: "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –¥—Ä—É–∑—å—è–º–∏
      const friendship = await Friendship.findOne({
        where: {
          [Op.or]: [
            { requester_id: senderId, addressee_id: receiverId },
            { requester_id: receiverId, addressee_id: senderId },
          ],
          status: "accepted",
        },
      });

      if (!friendship) {
        return res.status(403).json({
          success: false,
          message: "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º",
        });
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = await Message.create({
        sender_id: senderId,
        receiver_id: receiverId,
        content: content.trim(),
        message_type: messageType,
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      const messageWithSender = await Message.findByPk(message.id, {
        include: [
          {
            model: User,
            as: "sender",
            attributes: ["id", "name", "avatar"],
          },
        ],
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      try {
        await AchievementManager.checkAchievements(senderId, "message_sent", {
          messageId: message.id,
          receiverId: receiverId,
          content: content,
          messageType: messageType,
        });
        console.log(
          `üèÜ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId}`
        );
      } catch (achievementError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —á–∞—Ç–∞:", achievementError);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      try {
        await AchievementManager.checkAchievements(
          receiverId,
          "message_received",
          {
            messageId: message.id,
            senderId: senderId,
            content: content,
            messageType: messageType,
          }
        );
        console.log(
          `üèÜ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${receiverId}`
        );
      } catch (achievementError) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
          achievementError
        );
      }

      res.status(201).json({
        success: true,
        data: messageWithSender,
        message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static async editMessage(req, res) {
    try {
      const userId = req.user.id;
      const { messageId } = req.params;
      const { content } = req.body;

      const message = await Message.findByPk(messageId);

      if (!message) {
        return res.status(404).json({
          success: false,
          message: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        });
      }

      if (message.sender_id !== userId) {
        return res.status(403).json({
          success: false,
          message: "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await message.update({
        content: content.trim(),
        is_edited: true,
        edited_at: new Date(),
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      try {
        await AchievementManager.checkAchievements(userId, "message_edited", {
          messageId: messageId,
          newContent: content,
        });
        console.log(
          `üèÜ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
        );
      } catch (achievementError) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:",
          achievementError
        );
      }

      res.json({
        success: true,
        data: message,
        message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static async deleteMessage(req, res) {
    try {
      const userId = req.user.id;
      const { messageId } = req.params;

      const message = await Message.findByPk(messageId);

      if (!message) {
        return res.status(404).json({
          success: false,
          message: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        });
      }

      if (message.sender_id !== userId) {
        return res.status(403).json({
          success: false,
          message: "–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
        });
      }

      await message.destroy();

      res.json({
        success: true,
        message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
   */
  static async markAsRead(req, res) {
    try {
      const userId = req.user.id;
      const { otherUserId } = req.params;

      await Message.update(
        { is_read: true },
        {
          where: {
            sender_id: otherUserId,
            receiver_id: userId,
            is_read: false,
          },
        }
      );

      res.json({
        success: true,
        message: "–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }
}

module.exports = ChatController;
