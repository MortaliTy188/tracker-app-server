const { User, Friendship } = require("../models");
const { Op } = require("sequelize");

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
const sendFriendRequest = async (req, res) => {
  try {
    const requesterId = req.user.id;
    const { addresseeId } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ
    if (requesterId === parseInt(addresseeId)) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É —Å–∞–º–æ–º—É —Å–µ–±–µ",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const addressee = await User.findByPk(addresseeId);
    if (!addressee) {
      return res.status(404).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥—Ä—É–∂–±–∞
    const existingFriendship = await Friendship.findOne({
      where: {
        [Op.or]: [
          { requester_id: requesterId, addressee_id: addresseeId },
          { requester_id: addresseeId, addressee_id: requesterId },
        ],
      },
    });

    if (existingFriendship) {
      let message = "";
      switch (existingFriendship.status) {
        case "pending":
          message = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω";
          break;
        case "accepted":
          message = "–í—ã —É–∂–µ –¥—Ä—É–∑—å—è";
          break;
        case "declined":
          message = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω";
          break;
        case "blocked":
          message = "–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω";
          break;
      }
      return res.status(400).json({
        success: false,
        message: message,
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
    const friendship = await Friendship.create({
      requester_id: requesterId,
      addressee_id: addresseeId,
      status: "pending",
    });

    res.status(201).json({
      success: true,
      message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
      data: {
        id: friendship.id,
        requester_id: friendship.requester_id,
        addressee_id: friendship.addressee_id,
        status: friendship.status,
        created_at: friendship.created_at,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
const acceptFriendRequest = async (req, res) => {
  try {
    const userId = req.user.id;
    const { friendshipId } = req.params;

    console.log(
      `‚úÖ Accept request - User ID: ${userId}, Friendship ID: ${friendshipId}`
    );

    const friendship = await Friendship.findByPk(friendshipId);

    if (!friendship) {
      return res.status(404).json({
        success: false,
        message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    console.log(
      `‚úÖ Friendship found - Requester ID: ${friendship.requester_id}, Addressee ID: ${friendship.addressee_id}, Status: ${friendship.status}`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥—Ä–µ—Å–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
    if (parseInt(friendship.addressee_id) !== parseInt(userId)) {
      console.log(
        `‚ùå Access denied - Expected addressee: ${friendship.addressee_id}, Actual user: ${userId}`
      );
      return res.status(403).json({
        success: false,
        message: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    if (friendship.status !== "pending") {
      return res.status(400).json({
        success: false,
        message: "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "accepted"
    friendship.status = "accepted";
    friendship.updated_at = new Date();
    await friendship.save();

    res.json({
      success: true,
      message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø—Ä–∏–Ω—è—Ç",
      data: {
        id: friendship.id,
        requester_id: friendship.requester_id,
        addressee_id: friendship.addressee_id,
        status: friendship.status,
        updated_at: friendship.updated_at,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
const declineFriendRequest = async (req, res) => {
  try {
    const userId = req.user.id;
    const { friendshipId } = req.params;

    console.log(
      `‚ùå Decline request - User ID: ${userId}, Friendship ID: ${friendshipId}`
    );

    const friendship = await Friendship.findByPk(friendshipId);

    if (!friendship) {
      return res.status(404).json({
        success: false,
        message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    console.log(
      `‚ùå Friendship found - Requester ID: ${friendship.requester_id}, Addressee ID: ${friendship.addressee_id}, Status: ${friendship.status}`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥—Ä–µ—Å–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
    if (parseInt(friendship.addressee_id) !== parseInt(userId)) {
      console.log(
        `‚ùå Access denied - Expected addressee: ${friendship.addressee_id}, Actual user: ${userId}`
      );
      return res.status(403).json({
        success: false,
        message: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    if (friendship.status !== "pending") {
      return res.status(400).json({
        success: false,
        message: "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "declined"
    friendship.status = "declined";
    friendship.updated_at = new Date();
    await friendship.save();

    res.json({
      success: true,
      message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–∫–ª–æ–Ω–µ–Ω",
      data: {
        id: friendship.id,
        requester_id: friendship.requester_id,
        addressee_id: friendship.addressee_id,
        status: friendship.status,
        updated_at: friendship.updated_at,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
const removeFriend = async (req, res) => {
  try {
    const userId = req.user.id;
    const { friendshipId } = req.params;

    console.log(
      `üóëÔ∏è Remove friend - User ID: ${userId}, Friendship ID: ${friendshipId}`
    );

    const friendship = await Friendship.findByPk(friendshipId);

    if (!friendship) {
      return res.status(404).json({
        success: false,
        message: "–î—Ä—É–∂–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      });
    }

    console.log(
      `üóëÔ∏è Friendship found - Requester ID: ${friendship.requester_id}, Addressee ID: ${friendship.addressee_id}, Status: ${friendship.status}`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –¥—Ä—É–∂–±–µ
    if (
      parseInt(friendship.requester_id) !== parseInt(userId) &&
      parseInt(friendship.addressee_id) !== parseInt(userId)
    ) {
      console.log(
        `‚ùå Access denied - User ${userId} is not part of friendship between ${friendship.requester_id} and ${friendship.addressee_id}`
      );
      return res.status(403).json({
        success: false,
        message: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
      });
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥—Ä—É–∂–±–µ
    await friendship.destroy();

    res.json({
      success: true,
      message: "–î—Ä—É–∂–±–∞ —É–¥–∞–ª–µ–Ω–∞",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–∂–±—ã:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
const getFriends = async (req, res) => {
  try {
    const userId = req.user.id;
    const { page = 1, limit = 20 } = req.query;
    const offset = (page - 1) * limit;

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –¥—Ä—É–∂–±—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
    const sentFriendships = await Friendship.findAll({
      where: {
        requester_id: userId,
        status: "accepted",
      },
      include: [
        {
          model: User,
          as: "addressee",
          attributes: ["id", "name", "avatar", "level", "isPrivate"],
        },
      ],
      order: [["updated_at", "DESC"]],
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –¥—Ä—É–∂–±—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    const receivedFriendships = await Friendship.findAll({
      where: {
        addressee_id: userId,
        status: "accepted",
      },
      include: [
        {
          model: User,
          as: "requester",
          attributes: ["id", "name", "avatar", "level", "isPrivate"],
        },
      ],
      order: [["updated_at", "DESC"]],
    });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥—Ä—É–∑–µ–π
    const allFriendships = [
      ...sentFriendships.map((f) => ({
        friendshipId: f.id,
        friend: f.addressee,
        friendsSince: f.updated_at,
      })),
      ...receivedFriendships.map((f) => ({
        friendshipId: f.id,
        friend: f.requester,
        friendsSince: f.updated_at,
      })),
    ];

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    allFriendships.sort(
      (a, b) => new Date(b.friendsSince) - new Date(a.friendsSince)
    );
    const totalFriends = allFriendships.length;
    const paginatedFriends = allFriendships.slice(
      offset,
      offset + parseInt(limit)
    );

    const friends = paginatedFriends.map((item) => ({
      friendshipId: item.friendshipId,
      id: item.friend.id,
      name: item.friend.name,
      avatar: item.friend.avatar,
      level: item.friend.level,
      isPrivate: item.friend.isPrivate,
      friendsSince: item.friendsSince,
    }));

    res.json({
      success: true,
      data: {
        friends,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: totalFriends,
          totalPages: Math.ceil(totalFriends / limit),
        },
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–∂–±—É
const getPendingRequests = async (req, res) => {
  try {
    const userId = req.user.id;
    const { page = 1, limit = 20 } = req.query;
    const offset = (page - 1) * limit;

    console.log(`üì• Getting pending requests for user ${userId}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤—è–∑–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    const requests = await Friendship.findAndCountAll({
      where: {
        addressee_id: userId,
        status: "pending",
      },
      include: [
        {
          model: User,
          as: "requester",
          attributes: ["id", "name", "avatar", "level"],
        },
      ],
      limit: parseInt(limit),
      offset: parseInt(offset),
      order: [["created_at", "DESC"]],
    });

    console.log(`üì• Found ${requests.count} pending requests`);

    const pendingRequests = requests.rows.map((request) => ({
      friendshipId: request.id,
      requester: {
        id: request.requester.id,
        name: request.requester.name,
        avatar: request.requester.avatar,
        level: request.requester.level,
      },
      requestDate: request.created_at,
    }));

    res.json({
      success: true,
      data: {
        pendingRequests,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: requests.count,
          totalPages: Math.ceil(requests.count / limit),
        },
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–∂–±—É
const getSentRequests = async (req, res) => {
  try {
    const userId = req.user.id;
    const { page = 1, limit = 20 } = req.query;
    const offset = (page - 1) * limit;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤—è–∑–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    const requests = await Friendship.findAndCountAll({
      where: {
        requester_id: userId,
        status: "pending",
      },
      include: [
        {
          model: User,
          as: "addressee",
          attributes: ["id", "name", "avatar", "level"],
        },
      ],
      limit: parseInt(limit),
      offset: parseInt(offset),
      order: [["created_at", "DESC"]],
    });

    const sentRequests = requests.rows.map((request) => ({
      friendshipId: request.id,
      addressee: {
        id: request.addressee.id,
        name: request.addressee.name,
        avatar: request.addressee.avatar,
        level: request.addressee.level,
      },
      requestDate: request.created_at,
    }));

    res.json({
      success: true,
      data: {
        sentRequests,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: requests.count,
          totalPages: Math.ceil(requests.count / limit),
        },
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
const getFriendshipStatus = async (req, res) => {
  try {
    const userId = req.user.id;
    const { targetUserId } = req.params;

    if (userId === parseInt(targetUserId)) {
      return res.json({
        success: true,
        data: { status: "self" },
      });
    }

    const friendship = await Friendship.findOne({
      where: {
        [Op.or]: [
          { requester_id: userId, addressee_id: targetUserId },
          { requester_id: targetUserId, addressee_id: userId },
        ],
      },
    });

    if (!friendship) {
      return res.json({
        success: true,
        data: { status: "none" },
      });
    }

    let status = friendship.status;
    let canAccept = false;
    let canDecline = false;
    let canCancel = false;

    if (friendship.status === "pending") {
      if (friendship.addressee_id === userId) {
        // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å
        canAccept = true;
        canDecline = true;
        status = "received_request";
      } else {
        // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
        canCancel = true;
        status = "sent_request";
      }
    }

    res.json({
      success: true,
      data: {
        status,
        friendshipId: friendship.id,
        canAccept,
        canDecline,
        canCancel,
        createdAt: friendship.created_at,
        updatedAt: friendship.updated_at,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–∂–±—ã:", error);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

module.exports = {
  sendFriendRequest,
  acceptFriendRequest,
  declineFriendRequest,
  removeFriend,
  getFriends,
  getPendingRequests,
  getSentRequests,
  getFriendshipStatus,
};
