const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const swaggerUi = require("swagger-ui-express");
const path = require("path");
const { createServer } = require("http");
const { Server } = require("socket.io");

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ë–î
const { sequelize } = require("./models");
const syncDatabase = require("./setup/syncDatabase");

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Swagger
const swaggerSpec = require("./config/swagger");

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const userRoutes = require("./routes/userRoutes");
const skillRoutes = require("./routes/skillRoutes");
const skillCategoryRoutes = require("./routes/skillCategoryRoutes");
const topicRoutes = require("./routes/topicRoutes");
const noteRoutes = require("./routes/noteRoutes");
const topicStatusRoutes = require("./routes/topicStatusRoutes");
const feedbackRoutes = require("./routes/feedbackRoutes");
const achievementRoutes = require("./routes/achievementRoutes");
const activityRoutes = require("./routes/activityRoutes");
const friendshipRoutes = require("./routes/friendshipRoutes");
const chatRoutes = require("./routes/chatRoutes");

// –ò–º–ø–æ—Ä—Ç middleware
const {
  errorHandler,
  notFoundHandler,
  requestLogger,
  validateContentType,
  bodyLimitHandler,
} = require("./middlewares/errorHandler");

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ä—Ç–∞
const PortFinder = require("./utils/portFinder");

// –ò–º–ø–æ—Ä—Ç Socket.IO –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const SocketManager = require("./utils/socketManager");

const app = express();
const server = createServer(app);
const DEFAULT_PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS
app.use(
  cors({
    origin: process.env.FRONTEND_URL || "*",
    credentials: true,
  })
);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å CORS
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL || "*",
    credentials: true,
  },
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const socketManager = new SocketManager(io);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–¥–µ–º–æ —á–∞—Ç–∞)
app.use("/public", express.static(path.join(__dirname, "public")));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(requestLogger);

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
app.use(bodyParser.json({ limit: "10mb" }));
app.use(bodyParser.urlencoded({ extended: true, limit: "10mb" }));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(bodyLimitHandler);

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Content-Type
app.use(validateContentType);

// Swagger UI
app.use(
  "/api-docs",
  swaggerUi.serve,
  swaggerUi.setup(swaggerSpec, {
    explorer: true,
    customCss: ".swagger-ui .topbar { display: none }",
    customSiteTitle: "Tracker App API Documentation",
  })
);

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API
app.get("/", (req, res) => {
  res.json({
    message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tracker App API! üöÄ",
    version: "1.0.0",
    documentation: `/api-docs`,
    endpoints: {
      users: "/api/users",
      skills: "/api/skills",
      categories: "/api/categories",
      topics: "/api/topics",
      notes: "/api/notes",
      statuses: "/api/statuses",
      feedback: "/api/feedback",
      activity: "/api/activity",
      friendship: "/api/friendship",
      chat: "/api/chat",
      swagger: "/api-docs",
      health: "/health",
    },
    status: "active",
    timestamp: new Date().toISOString(),
  });
});

// Health check endpoint
app.get("/health", async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();

    res.json({
      status: "healthy",
      database: "connected",
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      timestamp: new Date().toISOString(),
      version: "1.0.0",
    });
  } catch (error) {
    res.status(503).json({
      status: "unhealthy",
      database: "disconnected",
      error: error.message,
      timestamp: new Date().toISOString(),
    });
  }
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use("/api/users", userRoutes);
app.use("/api/skills", skillRoutes);
app.use("/api/categories", skillCategoryRoutes);
app.use("/api/topics", topicRoutes);
app.use("/api/notes", noteRoutes);
app.use("/api/statuses", topicStatusRoutes);
app.use("/api/feedback", feedbackRoutes);
app.use("/api/achievements", achievementRoutes);
app.use("/api/activity", activityRoutes);
app.use("/api/friendship", friendshipRoutes);
app.use("/api/chat", chatRoutes);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use(notFoundHandler);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
app.use(errorHandler);

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ Tracker App Server...\n");

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log("üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...");
    await syncDatabase();

    // –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    const PORT = await PortFinder.getAvailablePort(DEFAULT_PORT);

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.listen(PORT, () => {
      console.log(`\n‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
      console.log(`üåê URL: http://localhost:${PORT}`);
      console.log(`üìö API Documentation: http://localhost:${PORT}/api-docs`);
      console.log(`‚ù§Ô∏è  Health Check: http://localhost:${PORT}/health`);
      console.log(`üí¨ Socket.IO –≥–æ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`);
      console.log(
        `üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${socketManager.getOnlineUsersCount()}`
      );
      console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:`);
      console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
      console.log(
        `   POST   /api/users/register        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
      );
      console.log(
        `   POST   /api/users/login           - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
      );
      console.log(`   GET    /api/users/profile         - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å`);
      console.log(`   PUT    /api/users/profile         - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å`);
      console.log(`   PUT    /api/users/change-password - –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å`);
      console.log(`   GET    /api/users/full-info       - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`);
      console.log(`   DELETE /api/users/delete-account  - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç`);
      console.log(`\nüéØ –ù–∞–≤—ã–∫–∏:`);
      console.log(`   GET    /api/skills                - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏`);
      console.log(`   POST   /api/skills                - –°–æ–∑–¥–∞—Ç—å –Ω–∞–≤—ã–∫`);
      console.log(`   GET    /api/skills/stats          - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≤—ã–∫–æ–≤`);
      console.log(
        `   GET    /api/skills/:id            - –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫ –ø–æ ID`
      );
      console.log(`   PUT    /api/skills/:id            - –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤—ã–∫`);
      console.log(`   DELETE /api/skills/:id            - –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫`);
      console.log(`\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:`);
      console.log(
        `   GET    /api/categories            - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`
      );
      console.log(`   POST   /api/categories            - –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
      console.log(
        `   GET    /api/categories/stats      - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π`
      );
      console.log(
        `   GET    /api/categories/:id        - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID`
      );
      console.log(`   PUT    /api/categories/:id        - –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
      console.log(`   DELETE /api/categories/:id        - –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
      console.log(`\nüìö –¢–µ–º—ã:`);
      console.log(`   GET    /api/topics                - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã`);
      console.log(`   POST   /api/topics                - –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É`);
      console.log(`   GET    /api/topics/stats          - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–º`);
      console.log(`   GET    /api/topics/:id            - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –ø–æ ID`);
      console.log(`   PUT    /api/topics/:id            - –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É`);
      console.log(`   PUT    /api/topics/:id/progress   - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å`);
      console.log(`   DELETE /api/topics/:id            - –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É`);
      console.log(`\nüìù –ó–∞–º–µ—Ç–∫–∏:`);
      console.log(
        `   GET    /api/notes                 - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏`
      );
      console.log(`   POST   /api/notes                 - –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É`);
      console.log(`   GET    /api/notes/search          - –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫`);
      console.log(`   GET    /api/notes/recent          - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏`);
      console.log(`   GET    /api/notes/stats           - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫`);
      console.log(
        `   GET    /api/notes/:id             - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ ID`
      );
      console.log(`   PUT    /api/notes/:id             - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É`);
      console.log(`   DELETE /api/notes/:id             - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É`);
      console.log(`\nüè∑Ô∏è  –°—Ç–∞—Ç—É—Å—ã:`);
      console.log(
        `   GET    /api/statuses              - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã`
      );
      console.log(`   POST   /api/statuses              - –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å`);
      console.log(
        `   GET    /api/statuses/default      - –°—Ç–∞—Ç—É—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`
      );
      console.log(
        `   POST   /api/statuses/default      - –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`
      );
      console.log(`   GET    /api/statuses/stats        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤`);
      console.log(
        `   GET    /api/statuses/:id          - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ ID`
      );
      console.log(`   PUT    /api/statuses/:id          - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å`);
      console.log(`   DELETE /api/statuses/:id          - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å`);
      console.log(`\nüîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C`);
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on("SIGINT", async () => {
  console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");

  try {
    await sequelize.close();
    console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ");
    console.log("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    process.exit(1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on("uncaughtException", (error) => {
  console.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", error);
  process.exit(1);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:", reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();
