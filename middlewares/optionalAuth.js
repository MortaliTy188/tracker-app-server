const jwt = require("jsonwebtoken");
const User = require("../models/userModel");

const JWT_SECRET = "secret_key"; // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

// Middleware –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ req.user
// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const optionalAuth = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;

    console.log(
      "üîí OptionalAuth - Auth header:",
      authHeader ? "Present" : "Missing"
    );

    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.log("üîí OptionalAuth - No auth header, continuing without user");
      req.user = null;
      return next();
    }

    const token = authHeader.split(" ")[1];

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!token) {
      console.log("üîí OptionalAuth - No token, continuing without user");
      req.user = null;
      return next();
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      const decoded = jwt.verify(token, JWT_SECRET);
      console.log(
        "üîí OptionalAuth - Token decoded successfully, user ID:",
        decoded.id
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const user = await User.findByPk(decoded.id);

      if (user) {
        console.log("üîí OptionalAuth - User found:", user.id, user.name);
        req.user = user;
      } else {
        console.log("üîí OptionalAuth - User not found in database");
        req.user = null;
      }
    } catch (tokenError) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log(
        "üîí OptionalAuth - Token verification failed:",
        tokenError.message
      );
      req.user = null;
    }

    next();
  } catch (error) {
    // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üîí OptionalAuth - General error:", error.message);
    req.user = null;
    next();
  }
};

module.exports = optionalAuth;
