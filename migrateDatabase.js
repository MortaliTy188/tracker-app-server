// –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { sequelize, User } = require("./models");

async function migrateDatabase() {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ registrationDate
    try {
      await sequelize.query('SELECT "registrationDate" FROM "users" LIMIT 1');
      console.log("‚úÖ –ü–æ–ª–µ registrationDate —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    } catch (error) {
      console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ registrationDate...");

      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é NULL
      await sequelize.query(
        'ALTER TABLE "users" ADD COLUMN "registrationDate" TIMESTAMP WITH TIME ZONE;'
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      await sequelize.query(
        'UPDATE "users" SET "registrationDate" = NOW() WHERE "registrationDate" IS NULL;'
      );

      // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –ø–æ–ª–µ NOT NULL
      await sequelize.query(
        'ALTER TABLE "users" ALTER COLUMN "registrationDate" SET NOT NULL;'
      );

      console.log("‚úÖ –ü–æ–ª–µ registrationDate –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ level
    try {
      await sequelize.query('SELECT "level" FROM "users" LIMIT 1');
      console.log("‚úÖ –ü–æ–ª–µ level —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    } catch (error) {
      console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ level...");

      // –°–æ–∑–¥–∞—ë–º enum –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      await sequelize.query(`
        DO $$ BEGIN
          CREATE TYPE enum_users_level AS ENUM('–Ω–æ–≤–∏—á–æ–∫', '–±–∞–∑–æ–≤—ã–π', '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '—ç–∫—Å–ø–µ—Ä—Ç');
        EXCEPTION
          WHEN duplicate_object THEN null;
        END $$;
      `);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ level
      await sequelize.query(
        'ALTER TABLE "users" ADD COLUMN "level" enum_users_level NOT NULL DEFAULT \'–Ω–æ–≤–∏—á–æ–∫\';'
      );

      console.log("‚úÖ –ü–æ–ª–µ level –¥–æ–±–∞–≤–ª–µ–Ω–æ");
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
    console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏...");
    await sequelize.sync({ alter: true });

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  migrateDatabase()
    .then(() => {
      console.log("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

module.exports = { migrateDatabase };
