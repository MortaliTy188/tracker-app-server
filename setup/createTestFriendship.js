const { Friendship } = require("../models");

async function createTestFriendship() {
  try {
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥—Ä—É–∂–±—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 1 –∏ 2...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥—Ä—É–∂–±–∞
    const existingFriendship = await Friendship.findOne({
      where: {
        requester_id: 1,
        addressee_id: 2,
      },
    });

    if (existingFriendship) {
      if (existingFriendship.status === "accepted") {
        console.log("‚úÖ –î—Ä—É–∂–±–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 1 –∏ 2 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
      } else {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –≤ —Å—Ç–∞—Ç—É—Å–µ pending
        await existingFriendship.update({
          status: "accepted",
          updated_at: new Date(),
        });
        console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –ø—Ä–∏–Ω—è—Ç!");
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –∏ —Å—Ä–∞–∑—É –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥—Ä—É–∂–±—É
      await Friendship.create({
        requester_id: 1,
        addressee_id: 2,
        status: "accepted",
        created_at: new Date(),
        updated_at: new Date(),
      });
      console.log("‚úÖ –î—Ä—É–∂–±–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 1 –∏ 2 —Å–æ–∑–¥–∞–Ω–∞!");
    }

    console.log("\nüí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç:");
    console.log("   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/public/chat-demo.html");
    console.log("   2. –í–≤–µ–¥–∏—Ç–µ User ID: 1");
    console.log("   3. –í–≤–µ–¥–∏—Ç–µ User ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: 2");
    console.log("   4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'");
    console.log(
      "   5. –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ç–æ—Ä—É—é –≤–∫–ª–∞–¥–∫—É —Å —Ç–µ–º–∏ –∂–µ User ID –Ω–∞–æ–±–æ—Ä–æ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    );

    process.exit(0);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—Ä—É–∂–±—ã:", error);
    process.exit(1);
  }
}

createTestFriendship();
