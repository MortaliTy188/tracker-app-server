const { User } = require("../models");
const bcrypt = require("bcrypt");

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞
 */
async function createTestUsers() {
  try {
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const existingUser1 = await User.findByPk(1);
    const existingUser2 = await User.findByPk(2);

    if (existingUser1 && existingUser2) {
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:");
      console.log(`   User 1: ${existingUser1.name} (${existingUser1.email})`);
      console.log(`   User 2: ${existingUser2.name} (${existingUser2.email})`);
      return;
    }

    const hashedPassword = await bcrypt.hash("demo123", 10);

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!existingUser1) {
      await User.create({
        name: "–ê–ª–µ–∫—Å–µ–π –î–µ–º–æ",
        email: "alex@demo.com",
        password: hashedPassword,
        level: "–±–∞–∑–æ–≤—ã–π",
        avatar: null,
        isPrivate: false,
        registrationDate: new Date(),
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: –ê–ª–µ–∫—Å–µ–π –î–µ–º–æ (alex@demo.com)");
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!existingUser2) {
      await User.create({
        name: "–ú–∞—Ä–∏—è –¢–µ—Å—Ç",
        email: "maria@demo.com",
        password: hashedPassword,
        level: "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        avatar: null,
        isPrivate: false,
        registrationDate: new Date(),
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: –ú–∞—Ä–∏—è –¢–µ—Å—Ç (maria@demo.com)");
    }

    console.log("\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:");
    console.log("   Email: alex@demo.com / maria@demo.com");
    console.log("   –ü–∞—Ä–æ–ª—å: demo123");
    console.log("\nüí¨ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞:");
    console.log("   - –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/public/chat-demo.html");
    console.log("   - –í–≤–µ–¥–∏—Ç–µ User ID 1 –∏ 2 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createTestUsers()
    .then(() => {
      console.log("üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥–æ—Ç–æ–≤—ã!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      process.exit(1);
    });
}

module.exports = createTestUsers;
