const { sequelize } = require("../models");

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É activity_logs –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function createActivityLogTable() {
  try {
    console.log("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã activity_logs...");

    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ENUM —Ç–∏–ø–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    await sequelize.query(`
      DO $$
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'enum_activity_logs_action') THEN
          CREATE TYPE enum_activity_logs_action AS ENUM (
            'LOGIN',
            'LOGOUT', 
            'PROFILE_UPDATE',
            'AVATAR_CHANGE',
            'EMAIL_CHANGE',
            'USERNAME_CHANGE',
            'TOPIC_CREATED',
            'TOPIC_COMPLETED',
            'TOPIC_UPDATED',
            'NOTE_CREATED',
            'NOTE_UPDATED',
            'NOTE_DELETED',
            'PASSWORD_CHANGE',
            'SKILL_CREATED',
            'SKILL_UPDATED',
            'SKILL_DELETED',
            'ACHIEVEMENT_EARNED',
            'FEEDBACK_SUBMITTED',
            'FRIEND_REQUEST_SENT',
            'FRIEND_REQUEST_ACCEPTED',
            'FRIEND_REQUEST_DECLINED',
            'FRIEND_REMOVED'
          );
        END IF;
      END
      $$;
    `);

    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã activity_logs
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS "activity_logs" (
        "id" SERIAL PRIMARY KEY,
        "user_id" INTEGER NOT NULL REFERENCES "users"("id") ON DELETE CASCADE,
        "action" enum_activity_logs_action NOT NULL,
        "details" JSONB DEFAULT '{}',
        "ip_address" VARCHAR(45),
        "user_agent" TEXT,
        "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
      );
    `);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS "idx_activity_logs_user_id_created_at" 
      ON "activity_logs" ("user_id", "created_at" DESC);
    `);

    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS "idx_activity_logs_action_created_at" 
      ON "activity_logs" ("action", "created_at" DESC);
    `);

    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS "idx_activity_logs_created_at" 
      ON "activity_logs" ("created_at" DESC);
    `);

    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ activity_logs —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏.");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã activity_logs:", error);
    throw error;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
 */
async function cleanupOldActivityLogs(daysToKeep = 90) {
  try {
    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π...`);

    const result = await sequelize.query(`
      DELETE FROM "activity_logs" 
      WHERE "created_at" < NOW() - INTERVAL '${daysToKeep} days'
    `);

    console.log(
      `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result[1].rowCount || 0} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.`
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤:", error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    try {
      await createActivityLogTable();

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
      if (process.argv.includes("--cleanup")) {
        const days = process.argv.find((arg) => arg.startsWith("--days="));
        const daysToKeep = days ? parseInt(days.split("=")[1]) : 90;
        await cleanupOldActivityLogs(daysToKeep);
      }

      console.log("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ activity_logs –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      process.exit(0);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞:", error);
      process.exit(1);
    }
  })();
}

module.exports = {
  createActivityLogTable,
  cleanupOldActivityLogs,
};
