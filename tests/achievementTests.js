const axios = require("axios");
const { Achievement, UserAchievement, User, sequelize } = require("../models");
const AchievementManager = require("../utils/achievementManager");
const DatabaseCleaner = require("../utils/databaseCleaner");
const testData = require("./testData");
const { initializeAchievements } = require("../initializeAchievements");

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
class AchievementTests {
  constructor() {
    this.testUserId = null;
    this.testToken = null;
    this.testResults = {
      passed: 0,
      failed: 0,
      total: 0,
      details: [],
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  async runAllTests(baseURL) {
    console.log("üèÜ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===");

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.setupTestData(baseURL);

      // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      await this.testAchievementInitialization();
      await this.testAchievementAPIEndpoints(baseURL);
      await this.testAchievementProgressCalculation();
      await this.testAchievementAutoUpdate(baseURL);
      await this.testFirstActionAchievements(baseURL);
      await this.testLevelAchievements();
      await this.testAchievementStatistics(baseURL);
      await this.testLeaderboard(baseURL);

      // –û—Ç—á—ë—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      this.printTestResults();

      return this.testResults.failed === 0;
    } catch (error) {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
      return false;
    }
  }
  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async setupTestData(baseURL) {
    console.log("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

    try {
      // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await DatabaseCleaner.fullClean();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ç—É—Å—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
      await testData.createTestData();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await initializeAchievements();

      // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º email
      const timestamp = Date.now();
      const registerResponse = await axios.post(
        `${baseURL}/api/users/register`,
        {
          name: "Achievement Test User",
          email: `achievement_test_${timestamp}@test.com`,
          password: "testpass123",
        }
      );

      this.testToken = registerResponse.data.data.token;

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const profileResponse = await axios.get(`${baseURL}/api/users/profile`, {
        headers: { Authorization: `Bearer ${this.testToken}` },
      });

      this.testUserId = profileResponse.data.data.user.id;

      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error.message);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  async testAchievementInitialization() {
    console.log("\nüß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");

    try {
      const achievements = await Achievement.findAll();
      const hasRequiredTypes =
        achievements.some((a) => a.type === "topics_completed") &&
        achievements.some((a) => a.type === "skills_created") &&
        achievements.some((a) => a.type === "notes_written") &&
        achievements.some((a) => a.type === "level_reached") &&
        achievements.some((a) => a.type === "first_action");

      if (achievements.length >= 10 && hasRequiredTypes) {
        this.recordTest(
          "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
          true,
          `–°–æ–∑–¥–∞–Ω–æ ${achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`
        );
      } else {
        this.recordTest(
          "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
          false,
          "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã"
        );
      }
    } catch (error) {
      this.recordTest("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", false, error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç 2: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
   */
  async testAchievementAPIEndpoints(baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 2: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");

    // 2.1: GET /api/achievements - –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    try {
      const response = await axios.get(`${baseURL}/api/achievements`);
      const { data } = response.data;

      if (
        response.status === 200 &&
        data.achievements &&
        data.achievements.length > 0
      ) {
        this.recordTest(
          "GET /api/achievements",
          true,
          `–ü–æ–ª—É—á–µ–Ω–æ ${data.achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`
        );
      } else {
        this.recordTest(
          "GET /api/achievements",
          false,
          "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"
        );
      }
    } catch (error) {
      this.recordTest("GET /api/achievements", false, error.message);
    }

    // 2.2: GET /api/achievements/my - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const response = await axios.get(`${baseURL}/api/achievements/my`, {
        headers: { Authorization: `Bearer ${this.testToken}` },
      });

      if (
        response.status === 200 &&
        response.data.data.achievements !== undefined
      ) {
        this.recordTest(
          "GET /api/achievements/my",
          true,
          "–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        );
      } else {
        this.recordTest(
          "GET /api/achievements/my",
          false,
          "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"
        );
      }
    } catch (error) {
      this.recordTest("GET /api/achievements/my", false, error.message);
    }

    // 2.3: GET /api/achievements/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    try {
      const response = await axios.get(`${baseURL}/api/achievements/stats`, {
        headers: { Authorization: `Bearer ${this.testToken}` },
      });

      const stats = response.data.data.stats;
      if (
        response.status === 200 &&
        typeof stats.total === "number" &&
        typeof stats.completed === "number" &&
        typeof stats.percentage === "number" &&
        typeof stats.points === "number"
      ) {
        this.recordTest(
          "GET /api/achievements/stats",
          true,
          `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.completed}/${stats.total} (${stats.percentage}%)`
        );
      } else {
        this.recordTest(
          "GET /api/achievements/stats",
          false,
          "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        );
      }
    } catch (error) {
      this.recordTest("GET /api/achievements/stats", false, error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç 3: –†–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  async testAchievementProgressCalculation() {
    console.log("\nüß™ –¢–µ—Å—Ç 3: –†–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ç–æ–ø–∏–∫–∏
      const topicAchievement = await Achievement.findOne({
        where: { type: "topics_completed", condition_value: 1 },
      });

      if (!topicAchievement) {
        this.recordTest(
          "–†–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
          false,
          "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ç–æ–ø–∏–∫–∏"
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0)
      const initialProgress = await AchievementManager.calculateProgress(
        this.testUserId,
        topicAchievement
      );

      if (initialProgress === 0) {
        this.recordTest(
          "–ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
          true,
          "–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–≤–µ–Ω 0"
        );
      } else {
        this.recordTest(
          "–ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
          false,
          `–û–∂–∏–¥–∞–ª—Å—è 0, –ø–æ–ª—É—á–µ–Ω ${initialProgress}`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á—ë—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–∞–≤—ã–∫–∏
      const skillAchievement = await Achievement.findOne({
        where: { type: "skills_created", condition_value: 1 },
      });

      if (skillAchievement) {
        const skillProgress = await AchievementManager.calculateProgress(
          this.testUserId,
          skillAchievement
        );
        if (skillProgress === 0) {
          this.recordTest(
            "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–≤—ã–∫–æ–≤",
            true,
            "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–∞–≤—ã–∫–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
          );
        } else {
          this.recordTest(
            "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–≤—ã–∫–æ–≤",
            false,
            `–û–∂–∏–¥–∞–ª—Å—è 0, –ø–æ–ª—É—á–µ–Ω ${skillProgress}`
          );
        }
      }
    } catch (error) {
      this.recordTest("–†–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", false, error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç 4: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö
   */
  async testAchievementAutoUpdate(baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 4: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö");
    try {
      // –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      const timestamp = Date.now();
      const categoryResponse = await axios.post(`${baseURL}/api/categories`, {
        name: `–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ${timestamp}`,
        description: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
      });

      const categoryId = categoryResponse.data.data.category.id;
      // –°–æ–∑–¥–∞—ë–º –Ω–∞–≤—ã–∫ (–¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
      const skillResponse = await axios.post(
        `${baseURL}/api/skills`,
        {
          name: `–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ${timestamp}`,
          description: "–ù–∞–≤—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
          category_id: categoryId,
        },
        {
          headers: { Authorization: `Bearer ${this.testToken}` },
        }
      );

      const skillId = skillResponse.data.data.skill.id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
      await new Promise((resolve) => setTimeout(resolve, 1000)); // –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

      const firstSkillAchievement = await Achievement.findOne({
        where: {
          type: "first_action",
          condition_data: { action_type: "first_skill" },
        },
      });

      if (firstSkillAchievement) {
        const userAchievement = await UserAchievement.findOne({
          where: {
            user_id: this.testUserId,
            achievement_id: firstSkillAchievement.id,
          },
        });

        if (userAchievement && userAchievement.progress >= 1) {
          this.recordTest(
            "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞",
            true,
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
          );
        } else {
          this.recordTest(
            "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞",
            false,
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å"
          );
        }
      }
      // –°–æ–∑–¥–∞—ë–º —Ç–æ–ø–∏–∫ (–¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
      const topicResponse = await axios.post(
        `${baseURL}/api/topics`,
        {
          name: `–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–ø–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ${timestamp}`,
          description: "–¢–æ–ø–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
          skill_id: skillId,
          progress: 0,
        },
        {
          headers: { Authorization: `Bearer ${this.testToken}` },
        }
      );

      const topicId = topicResponse.data.data.topic.id;

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ–ø–∏–∫
      await axios.put(
        `${baseURL}/api/topics/${topicId}/progress`,
        {
          progress: 100,
        },
        {
          headers: { Authorization: `Bearer ${this.testToken}` },
        }
      );

      await new Promise((resolve) => setTimeout(resolve, 1000)); // –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—ã–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ç–æ–ø–∏–∫
      const firstTopicAchievement = await Achievement.findOne({
        where: {
          type: "topics_completed",
          condition_value: 1,
        },
      });

      if (firstTopicAchievement) {
        const userTopicAchievement = await UserAchievement.findOne({
          where: {
            user_id: this.testUserId,
            achievement_id: firstTopicAchievement.id,
          },
        });

        if (userTopicAchievement && userTopicAchievement.is_completed) {
          this.recordTest(
            "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞",
            true,
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ"
          );
        } else {
          this.recordTest(
            "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞",
            false,
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ"
          );
        }
      }
    } catch (error) {
      this.recordTest("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", false, error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç 5: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  async testFirstActionAchievements(baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 5: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è");

    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await axios.post(
        `${baseURL}/api/achievements/recheck`,
        {},
        {
          headers: { Authorization: `Bearer ${this.testToken}` },
        }
      );

      await new Promise((resolve) => setTimeout(resolve, 1000)); // –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ
      const completedAchievements = await UserAchievement.findAll({
        where: {
          user_id: this.testUserId,
          is_completed: true,
        },
        include: [{ model: Achievement, as: "achievement" }],
      });

      const firstActionAchievements = completedAchievements.filter(
        (ua) => ua.achievement.type === "first_action"
      );

      if (firstActionAchievements.length >= 2) {
        this.recordTest(
          "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
          true,
          `–ü–æ–ª—É—á–µ–Ω–æ ${firstActionAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è`
        );
      } else {
        this.recordTest(
          "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
          false,
          `–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${firstActionAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`
        );
      }
    } catch (error) {
      this.recordTest("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", false, error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç 6: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏
   */
  async testLevelAchievements() {
    console.log("\nüß™ –¢–µ—Å—Ç 6: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏");

    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await User.update(
        { level: "–±–∞–∑–æ–≤—ã–π" },
        { where: { id: this.testUserId } }
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      await AchievementManager.checkAchievements(
        this.testUserId,
        "level_changed"
      );

      const levelAchievement = await Achievement.findOne({
        where: {
          type: "level_reached",
          condition_value: 2, // –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        },
      });

      if (levelAchievement) {
        const userLevelAchievement = await UserAchievement.findOne({
          where: {
            user_id: this.testUserId,
            achievement_id: levelAchievement.id,
          },
        });

        const progress = await AchievementManager.calculateProgress(
          this.testUserId,
          levelAchievement
        );

        if (progress >= 2) {
          this.recordTest(
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏",
            true,
            `–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è: ${progress}`
          );
        } else {
          this.recordTest(
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏",
            false,
            `–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${progress}`
          );
        }
      } else {
        this.recordTest(
          "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏",
          false,
          "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —É—Ä–æ–≤–µ–Ω—å"
        );
      }
    } catch (error) {
      this.recordTest("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏", false, error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  async testAchievementStatistics(baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");

    try {
      const response = await axios.get(`${baseURL}/api/achievements/stats`, {
        headers: { Authorization: `Bearer ${this.testToken}` },
      });

      const stats = response.data.data.stats;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const actualCompleted = await UserAchievement.count({
        where: { user_id: this.testUserId, is_completed: true },
      });

      const actualTotal = await Achievement.count({
        where: { is_active: true },
      });

      if (stats.completed === actualCompleted && stats.total === actualTotal) {
        this.recordTest(
          "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
          true,
          `${stats.completed}/${stats.total} (${stats.percentage}%) - ${stats.points} –æ—á–∫–æ–≤`
        );
      } else {
        this.recordTest(
          "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
          false,
          `–û–∂–∏–¥–∞–ª–æ—Å—å ${actualCompleted}/${actualTotal}, –ø–æ–ª—É—á–µ–Ω–æ ${stats.completed}/${stats.total}`
        );
      }
    } catch (error) {
      this.recordTest("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", false, error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç 8: –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
   */
  async testLeaderboard(baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 8: –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤");

    try {
      const response = await axios.get(
        `${baseURL}/api/achievements/leaderboard?limit=5`
      );

      const leaderboard = response.data.data.leaderboard;

      if (Array.isArray(leaderboard)) {
        const hasTestUser = leaderboard.some(
          (entry) => entry.user && entry.user.id === this.testUserId
        );

        if (hasTestUser) {
          this.recordTest(
            "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
            true,
            `–ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–∑ ${leaderboard.length} –∑–∞–ø–∏—Å–µ–π`
          );
        } else {
          this.recordTest(
            "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
            true,
            `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (${leaderboard.length} –∑–∞–ø–∏—Å–µ–π)`
          );
        }
      } else {
        this.recordTest(
          "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
          false,
          "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"
        );
      }
    } catch (error) {
      this.recordTest("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", false, error.message);
    }
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  recordTest(testName, passed, details = "") {
    this.testResults.total++;
    if (passed) {
      this.testResults.passed++;
      console.log(`‚úÖ ${testName} - ${details}`);
    } else {
      this.testResults.failed++;
      console.log(`‚ùå ${testName} - ${details}`);
    }

    this.testResults.details.push({
      name: testName,
      passed,
      details,
    });
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  printTestResults() {
    console.log("\nüèÜ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===");
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${this.testResults.passed}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${this.testResults.failed}`);
    console.log(`üìä –í—Å–µ–≥–æ: ${this.testResults.total}`);

    const successRate =
      this.testResults.total > 0
        ? Math.round((this.testResults.passed / this.testResults.total) * 100)
        : 0;

    console.log(`üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);

    if (this.testResults.failed === 0) {
      console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
    } else {
      console.log("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ");
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  async runQuickTest(baseURL) {
    console.log("üèÜ === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===");

    try {
      await this.setupTestData(baseURL);
      await this.testAchievementInitialization();
      await this.testAchievementAPIEndpoints(baseURL);

      this.printTestResults();
      return this.testResults.failed === 0;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞:", error);
      return false;
    }
  }
}

module.exports = AchievementTests;
