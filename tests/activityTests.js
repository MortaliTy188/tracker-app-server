const axios = require("axios");

class ActivityTests {
  constructor() {
    this.testResults = {
      passed: 0,
      failed: 0,
      total: 0,
      details: [],
    };
  }
  recordResult(testName, success, details = "") {
    this.testResults.total++;
    if (success) {
      this.testResults.passed++;
      console.log(`‚úÖ ${testName}`);
    } else {
      this.testResults.failed++;
      console.log(`‚ùå ${testName} - ${details}`);
    }

    this.testResults.details.push({
      name: testName,
      success,
      details,
    });
  }
  async runAllTests(baseURL, token) {
    try {
      console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...\n");

      // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await this.testGetMyActivity(baseURL, token);

      // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await this.testGetActivityStats(baseURL, token);

      // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏–µ
      await this.testActivityLogging(baseURL, token);

      // 4. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await this.testActivityFiltering(baseURL, token);

      // 5. –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await this.testActivityPagination(baseURL, token);

      const success = this.testResults.failed === 0;
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:`);
      console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.total}`);
      console.log(`–ü—Ä–æ—à–ª–æ: ${this.testResults.passed}`);
      console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
      console.log(`–°—Ç–∞—Ç—É—Å: ${success ? "‚úÖ" : "‚ùå"}`);

      return success;
    } catch (error) {
      console.error(
        "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        error.message
      );
      return false;
    }
  }
  async testGetMyActivity(baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/activity/my`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.status === 200 && response.data.success) {
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        const data = response.data.data;
        if (
          data &&
          typeof data.totalCount === "number" &&
          Array.isArray(data.logs)
        ) {
          this.recordResult("–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", true);
          return response.data;
        } else {
          this.recordResult(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            false,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞"
          );
          return null;
        }
      } else {
        this.recordResult(
          "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
          false,
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞"
        );
        return null;
      }
    } catch (error) {
      this.recordResult(
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        false,
        error.response?.data?.message || error.message
      );
      return null;
    }
  }
  async testGetActivityStats(baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/activity/stats`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.status === 200 && response.data.success) {
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const data = response.data.data;
        if (Array.isArray(data) || (data && typeof data === "object")) {
          this.recordResult("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", true);
          return response.data;
        } else {
          this.recordResult(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            false,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
          );
          return null;
        }
      } else {
        this.recordResult(
          "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
          false,
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞"
        );
        return null;
      }
    } catch (error) {
      this.recordResult(
        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        false,
        error.response?.data?.message || error.message
      );
      return null;
    }
  }
  async testActivityLogging(baseURL, token) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const initialResponse = await axios.get(`${baseURL}/api/activity/my`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const initialCount = initialResponse.data.success
        ? initialResponse.data.data.totalCount
        : 0;

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫, —á—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const skillResponse = await axios.post(
        `${baseURL}/api/skills`,
        {
          name: "–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
          description: "–ù–∞–≤—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
          category_id: 1, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (skillResponse.status !== 201) {
        this.recordResult(
          "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
          false,
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–≤—ã–∫"
        );
        return false;
      }

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise((resolve) => setTimeout(resolve, 500));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
      const activityResponse = await axios.get(`${baseURL}/api/activity/my`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (activityResponse.data.success) {
        const newCount = activityResponse.data.data.totalCount;

        if (newCount > initialCount) {
          this.recordResult("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏", true);

          // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫
          const skillId = skillResponse.data.data.skill.id;
          await axios.delete(`${baseURL}/api/skills/${skillId}`, {
            headers: { Authorization: `Bearer ${token}` },
          });

          return true;
        } else {
          this.recordResult(
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
            false,
            "–ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
          );
          return false;
        }
      } else {
        this.recordResult(
          "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
          false,
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        );
        return false;
      }
    } catch (error) {
      this.recordResult(
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
        false,
        error.response?.data?.message || error.message
      );
      return false;
    }
  }
  async testActivityFiltering(baseURL, token) {
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
      const response = await axios.get(`${baseURL}/api/activity/my?limit=5`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.status === 200 && response.data.success) {
        const data = response.data.data;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        if (data && Array.isArray(data.logs) && data.logs.length <= 5) {
          this.recordResult("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", true);
          return true;
        } else {
          this.recordResult(
            "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É",
            false,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
          );
          return false;
        }
      } else {
        this.recordResult(
          "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É",
          false,
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞"
        );
        return false;
      }
    } catch (error) {
      this.recordResult(
        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É",
        false,
        error.response?.data?.message || error.message
      );
      return false;
    }
  }
  async testActivityPagination(baseURL, token) {
    try {
      const response = await axios.get(
        `${baseURL}/api/activity/my?page=1&limit=2`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (response.status === 200 && response.data.success) {
        const data = response.data.data;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if (
          typeof data.totalCount === "number" &&
          typeof data.currentPage === "number" &&
          typeof data.totalPages === "number" &&
          Array.isArray(data.logs) &&
          data.logs.length <= 2
        ) {
          this.recordResult("–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", true);
          return true;
        } else {
          this.recordResult(
            "–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            false,
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
          );
          return false;
        }
      } else {
        this.recordResult(
          "–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
          false,
          "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞"
        );
        return false;
      }
    } catch (error) {
      this.recordResult(
        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        false,
        error.response?.data?.message || error.message
      );
      return false;
    }
  }
}

module.exports = new ActivityTests();
