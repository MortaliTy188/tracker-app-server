// –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫
const fs = require("fs");
const path = require("path");
const sharp = require("sharp");

class AvatarTests {
  constructor() {
    this.testResults = [];
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async createTestImage() {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é Sharp
      const imageBuffer = await sharp({
        create: {
          width: 100,
          height: 100,
          channels: 3,
          background: { r: 255, g: 255, b: 255 },
        },
      })
        .png()
        .toBuffer();

      return imageBuffer;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π PNG
      return Buffer.from([
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x37, 0x6e, 0xf9, 0x24, 0x00, 0x00, 0x00,
        0x0a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x62, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x01, 0xe2, 0x21, 0xbc, 0x33, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
        0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
      ]);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
  createLargeFile() {
    // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª—å—à–µ 5MB
    return Buffer.alloc(6 * 1024 * 1024, 0);
  }

  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
  async testUploadAvatar(axios, baseURL, token) {
    try {
      console.log("\nüì§ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏...");

      const FormData = require("form-data");
      const form = new FormData();

      const imageBuffer = await this.createTestImage();
      form.append("avatar", imageBuffer, {
        filename: "test-avatar.png",
        contentType: "image/png",
      });

      const response = await axios.post(`${baseURL}/api/users/avatar`, form, {
        headers: {
          Authorization: `Bearer ${token}`,
          ...form.getHeaders(),
        },
      });

      console.log("‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:", response.data);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (
        response.data.success &&
        response.data.data.avatar &&
        response.data.data.user.avatar
      ) {
        console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
        this.testResults.push({ test: "uploadAvatar", status: "passed" });
        return response.data.data.avatar;
      } else {
        console.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞");
        this.testResults.push({ test: "uploadAvatar", status: "failed" });
        return null;
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:",
        error.response?.data || error.message
      );
      this.testResults.push({ test: "uploadAvatar", status: "failed" });
      return null;
    }
  }

  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
  async testUploadLargeFile(axios, baseURL, token) {
    try {
      console.log("\nüì§ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...");

      const FormData = require("form-data");
      const form = new FormData();

      const largeBuffer = this.createLargeFile();
      form.append("avatar", largeBuffer, {
        filename: "large-avatar.png",
        contentType: "image/png",
      });

      await axios.post(`${baseURL}/api/users/avatar`, form, {
        headers: {
          Authorization: `Bearer ${token}`,
          ...form.getHeaders(),
        },
      });

      console.error("‚ùå –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è");
      this.testResults.push({ test: "uploadLargeFile", status: "failed" });
      return false;
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      const isFileSizeError =
        (error.response?.status === 400 &&
          (error.response?.data?.message?.includes("—Ä–∞–∑–º–µ—Ä") ||
            error.response?.data?.message?.includes("–±–æ–ª—å—à–æ–π") ||
            error.response?.data?.message?.includes("5MB"))) ||
        error.code === "LIMIT_FILE_SIZE" ||
        error.message?.includes("File too large");

      if (isFileSizeError) {
        console.log(
          "‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω:",
          error.response?.data?.message || error.message
        );
        this.testResults.push({ test: "uploadLargeFile", status: "passed" });
        return true;
      } else {
        console.error(
          "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:",
          error.response?.data || error.message
        );
        this.testResults.push({ test: "uploadLargeFile", status: "failed" });
        return false;
      }
    }
  }

  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  async testUploadWrongFileType(axios, baseURL, token) {
    try {
      console.log("\nüì§ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞...");

      const FormData = require("form-data");
      const form = new FormData();

      const textBuffer = Buffer.from("This is not an image", "utf8");
      form.append("avatar", textBuffer, {
        filename: "test.txt",
        contentType: "text/plain",
      });

      await axios.post(`${baseURL}/api/users/avatar`, form, {
        headers: {
          Authorization: `Bearer ${token}`,
          ...form.getHeaders(),
        },
      });

      console.error("‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è");
      this.testResults.push({ test: "uploadWrongFileType", status: "failed" });
      return false;
    } catch (error) {
      if (
        error.response?.status === 400 &&
        error.response?.data?.message?.includes("—Ç–∏–ø —Ñ–∞–π–ª–∞")
      ) {
        console.log(
          "‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω:",
          error.response.data.message
        );
        this.testResults.push({
          test: "uploadWrongFileType",
          status: "passed",
        });
        return true;
      } else {
        console.error(
          "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:",
          error.response?.data || error.message
        );
        this.testResults.push({
          test: "uploadWrongFileType",
          status: "failed",
        });
        return false;
      }
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
  async testGetProfileWithAvatar(axios, baseURL, token) {
    try {
      console.log("\nüë§ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π...");

      const response = await axios.get(`${baseURL}/api/users/profile`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:", response.data);

      if (
        response.data.success &&
        response.data.data.user &&
        response.data.data.user.avatar
      ) {
        console.log("‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ");
        this.testResults.push({
          test: "getProfileWithAvatar",
          status: "passed",
        });
        return true;
      } else {
        console.error("‚ùå –ê–≤–∞—Ç–∞—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ");
        this.testResults.push({
          test: "getProfileWithAvatar",
          status: "failed",
        });
        return false;
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:",
        error.response?.data || error.message
      );
      this.testResults.push({ test: "getProfileWithAvatar", status: "failed" });
      return false;
    }
  }

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
  async testDeleteAvatar(axios, baseURL, token) {
    try {
      console.log("\nüóëÔ∏è –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏...");

      const response = await axios.delete(`${baseURL}/api/users/avatar`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞:", response.data);

      if (response.data.success && response.data.data.user.avatar === null) {
        console.log("‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        this.testResults.push({ test: "deleteAvatar", status: "passed" });
        return true;
      } else {
        console.error("‚ùå –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞");
        this.testResults.push({ test: "deleteAvatar", status: "failed" });
        return false;
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏:",
        error.response?.data || error.message
      );
      this.testResults.push({ test: "deleteAvatar", status: "failed" });
      return false;
    }
  }

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
  async testDeleteNonExistentAvatar(axios, baseURL, token) {
    try {
      console.log("\nüóëÔ∏è –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏...");

      await axios.delete(`${baseURL}/api/users/avatar`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.error(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É"
      );
      this.testResults.push({
        test: "deleteNonExistentAvatar",
        status: "failed",
      });
      return false;
    } catch (error) {
      if (
        error.response?.status === 400 &&
        error.response?.data?.message?.includes("–Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏")
      ) {
        console.log(
          "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏:",
          error.response.data.message
        );
        this.testResults.push({
          test: "deleteNonExistentAvatar",
          status: "passed",
        });
        return true;
      } else {
        console.error(
          "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:",
          error.response?.data || error.message
        );
        this.testResults.push({
          test: "deleteNonExistentAvatar",
          status: "failed",
        });
        return false;
      }
    }
  }

  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  async testUploadWithoutAuth(axios, baseURL) {
    try {
      console.log("\nüîí –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
      const FormData = require("form-data");
      const form = new FormData();

      const imageBuffer = await this.createTestImage();
      form.append("avatar", imageBuffer, {
        filename: "test-avatar.png",
        contentType: "image/png",
      });

      await axios.post(`${baseURL}/api/users/avatar`, form, {
        headers: form.getHeaders(),
      });

      console.error("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
      this.testResults.push({ test: "uploadWithoutAuth", status: "failed" });
      return false;
    } catch (error) {
      if (error.response?.status === 401) {
        console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
        this.testResults.push({ test: "uploadWithoutAuth", status: "passed" });
        return true;
      } else {
        console.error(
          "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:",
          error.response?.data || error.message
        );
        this.testResults.push({ test: "uploadWithoutAuth", status: "failed" });
        return false;
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
  async testPhysicalFileExists(avatarUrl) {
    try {
      console.log("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...");

      if (!avatarUrl) {
        console.error("‚ùå URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
        this.testResults.push({ test: "physicalFileExists", status: "failed" });
        return false;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
      const filename = path.basename(avatarUrl);
      const uploadsDir = path.join(__dirname, "../uploads/avatars");
      const filePath = path.join(uploadsDir, filename);

      if (fs.existsSync(filePath)) {
        const stats = fs.statSync(filePath);
        console.log(
          `‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${filename}, —Ä–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`
        );
        this.testResults.push({ test: "physicalFileExists", status: "passed" });
        return true;
      } else {
        console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        this.testResults.push({ test: "physicalFileExists", status: "failed" });
        return false;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞:", error.message);
      this.testResults.push({ test: "physicalFileExists", status: "failed" });
      return false;
    }
  }
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  async registerTestUser(axios, baseURL) {
    try {
      const userData = {
        name: "–¢–µ—Å—Ç –ê–≤–∞—Ç–∞—Ä–æ–∫",
        email: `avatar_test_${Date.now()}@example.com`,
        password: "TestPassword123",
      };

      const response = await axios.post(
        `${baseURL}/api/users/register`,
        userData
      );

      if (response.data.success && response.data.data.token) {
        return response.data.data.token;
      } else {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error.response?.data || error.message
      );
      throw error;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests(axios, baseURL, providedToken = null) {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–∫...");
    this.testResults = [];

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      let token = providedToken;
      if (!token) {
        console.log("üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫...");
        token = await this.registerTestUser(axios, baseURL);
        console.log("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–∫");
      }
      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      await this.testUploadWithoutAuth(axios, baseURL);

      // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
      await this.testDeleteNonExistentAvatar(axios, baseURL, token);

      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      await this.testUploadWrongFileType(axios, baseURL, token);

      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
      await this.testUploadLargeFile(axios, baseURL, token);

      // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
      const avatarUrl = await this.testUploadAvatar(axios, baseURL, token);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
      if (avatarUrl) {
        await this.testPhysicalFileExists(avatarUrl);
      }

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
      await this.testGetProfileWithAvatar(axios, baseURL, token);

      // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
      await this.testDeleteAvatar(axios, baseURL, token);

      // –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const passed = this.testResults.filter(
        (r) => r.status === "passed"
      ).length;
      const failed = this.testResults.filter(
        (r) => r.status === "failed"
      ).length;
      const total = this.testResults.length;

      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫:`);
      console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${passed}/${total}`);
      console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}/${total}`);
      console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / total) * 100)}%`);

      if (failed > 0) {
        console.log("\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:");
        this.testResults
          .filter((r) => r.status === "failed")
          .forEach((r) => console.log(`   - ${r.test}`));
      }

      return { passed, failed, total, success: failed === 0 };
    } catch (error) {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
      return { passed: 0, failed: 1, total: 1, success: false };
    }
  }
}

module.exports = new AvatarTests();
