// –¢–µ—Å—Ç—ã –¥–ª—è API –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–≤—ã–∫–æ–≤
const testData = require("./testData");

class CategoryTests {
  constructor() {
    this.testToken = null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  async getTestToken(axios, baseURL) {
    if (this.testToken) return this.testToken;

    try {
      const userData = testData.getTestUserData().admin;
      const response = await axios.post(`${baseURL}/api/users/login`, {
        email: userData.email,
        password: userData.password,
      });

      this.testToken = response.data.data.token;
      return this.testToken;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async testGetAllCategories(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/categories`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log(
        "‚úÖ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:",
        response.data.data.length,
        "–∫–∞—Ç–µ–≥–æ—Ä–∏–π"
      );
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async testCreateCategory(axios, baseURL, token) {
    try {
      const categoryData = {
        name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
      };

      const response = await axios.post(
        `${baseURL}/api/categories`,
        categoryData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
  async testGetCategoryById(axios, baseURL, token, categoryId) {
    try {
      const response = await axios.get(
        `${baseURL}/api/categories/${categoryId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ ID:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async testUpdateCategory(axios, baseURL, token, categoryId) {
    try {
      const updateData = {
        name: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        description: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
      };

      const response = await axios.put(
        `${baseURL}/api/categories/${categoryId}`,
        updateData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async testGetCategoryStats(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/categories/stats`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—É—á–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async testGetCategorySkills(axios, baseURL, token, categoryId) {
    try {
      const response = await axios.get(
        `${baseURL}/api/categories/${categoryId}/skills`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –ù–∞–≤—ã–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async testDeleteCategory(axios, baseURL, token, categoryId) {
    try {
      const response = await axios.delete(
        `${baseURL}/api/categories/${categoryId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async runAllTests(axios, baseURL) {
    console.log("üìÅ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await this.getTestToken(axios, baseURL);
    if (!token) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤");
    }

    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");
    await this.testGetAllCategories(axios, baseURL, token);

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
    const newCategory = await this.testCreateCategory(axios, baseURL, token);

    if (newCategory && newCategory.data && newCategory.data.category) {
      const categoryId = newCategory.data.category.id;

      // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
      console.log("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID...");
      await this.testGetCategoryById(axios, baseURL, token, categoryId);

      // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.log("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
      await this.testUpdateCategory(axios, baseURL, token, categoryId);

      // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");
      await this.testGetCategoryStats(axios, baseURL, token);

      // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.log("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
      await this.testGetCategorySkills(axios, baseURL, token, categoryId);

      // 7. –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.log("\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
      await this.testDeleteCategory(axios, baseURL, token, categoryId);
    }

    console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
  }
}

module.exports = new CategoryTests();
