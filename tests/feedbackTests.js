// –¢–µ—Å—Ç—ã –¥–ª—è API –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
const axios = require("axios");

class FeedbackTests {
  constructor(baseURL) {
    this.baseURL = baseURL;
    this.testResults = [];
    this.feedbackId = null;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Feedback API...");

    const tests = [
      this.testCreateFeedback,
      this.testCreateFeedbackValidation,
      this.testGetAllFeedback,
      this.testGetFeedbackById,
      this.testGetFeedbackByEmail,
      this.testGetFeedbackStats,
      this.testUpdateFeedback,
      this.testDeleteFeedback,
      this.testGetNonExistentFeedback,
      this.testSearchFeedback,
    ];

    for (const test of tests) {
      try {
        await test.call(this);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${test.name}:`, error.message);
        this.testResults.push({
          name: test.name,
          status: "failed",
          error: error.message,
        });
      }
    }

    return this.getResults();
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  async testCreateFeedback() {
    console.log("  üìù –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...");

    const feedbackData = {
      user_name: "–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤—ã–π",
      user_email: "ivan.test@example.com",
      email_theme: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
      message:
        "–•–æ—Ç–µ–ª–æ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ –æ—á–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è.",
    };

    try {
      const response = await axios.post(
        `${this.baseURL}/api/feedback`,
        feedbackData,
        {
          headers: { "Content-Type": "application/json" },
        }
      );

      if (response.status === 201 && response.data.success) {
        this.feedbackId = response.data.data.feedback.id;
        console.log("    ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
        this.testResults.push({
          name: "testCreateFeedback",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏");
      this.testResults.push({
        name: "testCreateFeedback",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  async testCreateFeedbackValidation() {
    console.log("  üîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...");

    const invalidData = [
      // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
      {},
      // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      {
        user_email: "test@example.com",
        email_theme: "–¢–µ–º–∞",
        message: "–°–æ–æ–±—â–µ–Ω–∏–µ",
      },
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email
      {
        user_name: "–¢–µ—Å—Ç",
        user_email: "invalid-email",
        email_theme: "–¢–µ–º–∞",
        message: "–°–æ–æ–±—â–µ–Ω–∏–µ",
      },
      // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞
      {
        user_name: "–¢–µ—Å—Ç",
        user_email: "test@example.com",
        message: "–°–æ–æ–±—â–µ–Ω–∏–µ",
      },
    ];

    let passedValidations = 0;

    for (const data of invalidData) {
      try {
        const response = await axios.post(
          `${this.baseURL}/api/feedback`,
          data,
          {
            headers: { "Content-Type": "application/json" },
          }
        );

        if (response.status === 400) {
          passedValidations++;
        }
      } catch (error) {
        if (error.response && error.response.status === 400) {
          passedValidations++;
        }
      }
    }

    if (passedValidations === invalidData.length) {
      console.log("    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
      this.testResults.push({
        name: "testCreateFeedbackValidation",
        status: "passed",
      });
    } else {
      console.log("    ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
      this.testResults.push({
        name: "testCreateFeedbackValidation",
        status: "failed",
        error: "–ù–µ –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
      });
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π
  async testGetAllFeedback() {
    console.log("  üìã –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π...");

    try {
      const response = await axios.get(`${this.baseURL}/api/feedback`);

      if (
        response.status === 200 &&
        response.data.success &&
        Array.isArray(response.data.data.feedback)
      ) {
        console.log(
          `    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.data.feedback.length} –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π`
        );
        this.testResults.push({
          name: "testGetAllFeedback",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π");
      this.testResults.push({
        name: "testGetAllFeedback",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ ID
  async testGetFeedbackById() {
    console.log("  üîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ ID...");

    if (!this.feedbackId) {
      console.log("    ‚ö†Ô∏è ID –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç");
      return;
    }

    try {
      const response = await axios.get(
        `${this.baseURL}/api/feedback/${this.feedbackId}`
      );

      if (
        response.status === 200 &&
        response.data.success &&
        response.data.data.feedback
      ) {
        console.log("    ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ ID");
        this.testResults.push({
          name: "testGetFeedbackById",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ ID");
      this.testResults.push({
        name: "testGetFeedbackById",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ email
  async testGetFeedbackByEmail() {
    console.log("  üìß –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ email...");

    const testEmail = "ivan.test@example.com";

    try {
      const response = await axios.get(
        `${this.baseURL}/api/feedback/email/${testEmail}`
      );

      if (
        response.status === 200 &&
        response.data.success &&
        Array.isArray(response.data.data.feedback)
      ) {
        console.log("    ‚úÖ –û–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ email");
        this.testResults.push({
          name: "testGetFeedbackByEmail",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π –ø–æ email");
      this.testResults.push({
        name: "testGetFeedbackByEmail",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  async testGetFeedbackStats() {
    console.log("  üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...");

    try {
      const response = await axios.get(`${this.baseURL}/api/feedback/stats`);

      if (
        response.status === 200 &&
        response.data.success &&
        response.data.data.totalFeedback !== undefined
      ) {
        console.log("    ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—É—á–µ–Ω–∞");
        this.testResults.push({
          name: "testGetFeedbackStats",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
      this.testResults.push({
        name: "testGetFeedbackStats",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  async testUpdateFeedback() {
    console.log("  ‚úèÔ∏è –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...");

    if (!this.feedbackId) {
      console.log("    ‚ö†Ô∏è ID –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç");
      return;
    }

    const updateData = {
      email_theme: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
      message: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏.",
    };

    try {
      const response = await axios.put(
        `${this.baseURL}/api/feedback/${this.feedbackId}`,
        updateData,
        {
          headers: { "Content-Type": "application/json" },
        }
      );

      if (response.status === 200 && response.data.success) {
        console.log("    ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        this.testResults.push({
          name: "testUpdateFeedback",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏");
      this.testResults.push({
        name: "testUpdateFeedback",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  async testSearchFeedback() {
    console.log("  üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...");

    try {
      const response = await axios.get(
        `${this.baseURL}/api/feedback?search=—Ç–µ–º–∞&page=1&limit=5`
      );

      if (
        response.status === 200 &&
        response.data.success &&
        response.data.pagination
      ) {
        console.log("    ‚úÖ –ü–æ–∏—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");
        this.testResults.push({
          name: "testSearchFeedback",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏");
      this.testResults.push({
        name: "testSearchFeedback",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  async testGetNonExistentFeedback() {
    console.log("  üö´ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...");

    try {
      const response = await axios.get(`${this.baseURL}/api/feedback/99999`);

      // –û–∂–∏–¥–∞–µ–º 404 –æ—à–∏–±–∫—É
      if (response.status === 404) {
        console.log(
          "    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
        );
        this.testResults.push({
          name: "testGetNonExistentFeedback",
          status: "passed",
        });
      } else {
        throw new Error(`–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
      }
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log(
          "    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
        );
        this.testResults.push({
          name: "testGetNonExistentFeedback",
          status: "passed",
        });
      } else {
        console.log(
          "    ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
        );
        this.testResults.push({
          name: "testGetNonExistentFeedback",
          status: "failed",
          error: error.message,
        });
        throw error;
      }
    }
  }

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º)
  async testDeleteFeedback() {
    console.log("  üóëÔ∏è –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...");

    if (!this.feedbackId) {
      console.log("    ‚ö†Ô∏è ID –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç");
      return;
    }

    try {
      const response = await axios.delete(
        `${this.baseURL}/api/feedback/${this.feedbackId}`
      );

      if (response.status === 200 && response.data.success) {
        console.log("    ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        this.testResults.push({
          name: "testDeleteFeedback",
          status: "passed",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
      }
    } catch (error) {
      console.log("    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏");
      this.testResults.push({
        name: "testDeleteFeedback",
        status: "failed",
        error: error.message,
      });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  getResults() {
    const passed = this.testResults.filter((r) => r.status === "passed").length;
    const failed = this.testResults.filter((r) => r.status === "failed").length;
    const total = this.testResults.length;

    return {
      passed,
      failed,
      total,
      details: this.testResults,
    };
  }
}

module.exports = FeedbackTests;
