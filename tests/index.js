// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
const axios = require("axios");
const { sequelize } = require("../models");
const testData = require("./testData");
const userTests = require("./userApiTest");
const skillTests = require("./skillTests");
const categoryTests = require("./categoryTests");
const topicTests = require("./topicTests");
const noteTests = require("./noteTests");
const statusTests = require("./statusTests");

class TestRunner {
  constructor() {
    this.baseURL = "http://localhost:3000";
    this.testResults = {
      passed: 0,
      failed: 0,
      total: 0,
      details: [],
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
  async clearDatabase() {
    try {
      console.log("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ FK constraints)
      await sequelize.query('DELETE FROM "Note"', {
        type: sequelize.QueryTypes.DELETE,
      });
      await sequelize.query('DELETE FROM "topics"', {
        type: sequelize.QueryTypes.DELETE,
      });
      await sequelize.query('DELETE FROM "skills"', {
        type: sequelize.QueryTypes.DELETE,
      });
      await sequelize.query('DELETE FROM "users"', {
        type: sequelize.QueryTypes.DELETE,
      });
      await sequelize.query('DELETE FROM "skill_category"', {
        type: sequelize.QueryTypes.DELETE,
      });
      await sequelize.query('DELETE FROM "topic_status"', {
        type: sequelize.QueryTypes.DELETE,
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã –¥–ª—è PostgreSQL
      await sequelize.query("ALTER SEQUENCE users_id_seq RESTART WITH 1", {
        type: sequelize.QueryTypes.RAW,
      });
      await sequelize.query("ALTER SEQUENCE skills_id_seq RESTART WITH 1", {
        type: sequelize.QueryTypes.RAW,
      });
      await sequelize.query(
        "ALTER SEQUENCE skill_category_id_seq RESTART WITH 1",
        { type: sequelize.QueryTypes.RAW }
      );
      await sequelize.query("ALTER SEQUENCE topics_id_seq RESTART WITH 1", {
        type: sequelize.QueryTypes.RAW,
      });
      await sequelize.query(
        "ALTER SEQUENCE topic_status_id_seq RESTART WITH 1",
        { type: sequelize.QueryTypes.RAW }
      );
      await sequelize.query('ALTER SEQUENCE "Note_id_seq" RESTART WITH 1', {
        type: sequelize.QueryTypes.RAW,
      });

      console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error.message);
      throw error;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async loadTestData() {
    try {
      console.log("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
      await testData.createTestData();
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  async checkServerAvailability() {
    try {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...");
      const response = await axios.get(`${this.baseURL}/health`, {
        timeout: 5000,
      });

      if (response.data.status === "healthy") {
        console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω");
        return true;
      } else {
        console.log("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        return false;
      }
    } catch (error) {
      console.log("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error.message);
      console.log("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev");
      return false;
    }
  }

  // –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
  recordTestResult(testName, success, details = "") {
    this.testResults.total++;
    if (success) {
      this.testResults.passed++;
      console.log(`‚úÖ ${testName}`);
    } else {
      this.testResults.failed++;
      console.log(`‚ùå ${testName} - ${details}`);
    }

    this.testResults.details.push({
      name: testName,
      success,
      details,
    });
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Tracker App");
    console.log("=============================================\n");

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const serverAvailable = await this.checkServerAvailability();
      if (!serverAvailable) {
        console.log("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        return false;
      }

      // 2. –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.clearDatabase();

      // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.loadTestData();

      console.log("\nüìã –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...\n");

      // 4. –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
      console.log("================================");
      await this.runUserTests();

      // 5. –¢–µ—Å—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤
      console.log("\nüè∑Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å—Ç–∞—Ç—É—Å–æ–≤");
      console.log("=============================");
      await this.runStatusTests();

      // 6. –¢–µ—Å—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      console.log("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
      console.log("=============================");
      await this.runCategoryTests();

      // 7. –¢–µ—Å—Ç—ã –Ω–∞–≤—ã–∫–æ–≤
      console.log("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞–≤—ã–∫–æ–≤");
      console.log("===========================");
      await this.runSkillTests();

      // 8. –¢–µ—Å—Ç—ã —Ç–µ–º
      console.log("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ç–µ–º");
      console.log("=======================");
      await this.runTopicTests();

      // 9. –¢–µ—Å—Ç—ã –∑–∞–º–µ—Ç–æ–∫
      console.log("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–º–µ—Ç–æ–∫");
      console.log("===========================");
      await this.runNoteTests();

      // –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      this.printTestResults();

      return this.testResults.failed === 0;
    } catch (error) {
      console.error("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error.message);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async runUserTests() {
    try {
      const token = await userTests.testRegistration(axios, this.baseURL);
      this.recordTestResult("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", !!token);

      if (token) {
        const profile = await userTests.testGetProfile(
          axios,
          this.baseURL,
          token
        );
        this.recordTestResult("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", !!profile);

        const updated = await userTests.testUpdateProfile(
          axios,
          this.baseURL,
          token,
          {
            name: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ò–º—è",
          }
        );
        this.recordTestResult("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", !!updated);

        const fullInfo = await userTests.testGetFullInfo(
          axios,
          this.baseURL,
          token
        );
        this.recordTestResult("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", !!fullInfo);
      }
    } catch (error) {
      this.recordTestResult("–¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", false, error.message);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
  async runStatusTests() {
    try {
      await statusTests.runAllTests(axios, this.baseURL);
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤", true);
    } catch (error) {
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤", false, error.message);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async runCategoryTests() {
    try {
      await categoryTests.runAllTests(axios, this.baseURL);
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", true);
    } catch (error) {
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", false, error.message);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–≤—ã–∫–æ–≤
  async runSkillTests() {
    try {
      await skillTests.runAllTests(axios, this.baseURL);
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤", true);
    } catch (error) {
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤", false, error.message);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–µ–º
  async runTopicTests() {
    try {
      await topicTests.runAllTests(axios, this.baseURL);
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º", true);
    } catch (error) {
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º", false, error.message);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∑–∞–º–µ—Ç–æ–∫
  async runNoteTests() {
    try {
      await noteTests.runAllTests(axios, this.baseURL);
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫", true);
    } catch (error) {
      this.recordTestResult("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫", false, error.message);
    }
  }

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  printTestResults() {
    console.log("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
    console.log("==========================");
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.total}`);
    console.log(`–ü—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: ${this.testResults.passed}`);
    console.log(`–ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: ${this.testResults.failed}`);
    console.log(
      `–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(
        (this.testResults.passed / this.testResults.total) * 100
      )}%`
    );

    if (this.testResults.failed > 0) {
      console.log("\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:");
      this.testResults.details
        .filter((test) => !test.success)
        .forEach((test) => {
          console.log(`   - ${test.name}: ${test.details}`);
        });
    }

    if (this.testResults.failed === 0) {
      console.log("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!");
    } else {
      console.log("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.");
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const runner = new TestRunner();

  runner
    .runAllTests()
    .then((success) => {
      process.exit(success ? 0 : 1);
    })
    .catch((error) => {
      console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

module.exports = TestRunner;
