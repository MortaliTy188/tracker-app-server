// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
const testData = require("./testData");

class LevelAPITests {
  constructor() {
    this.testToken = null;
    this.testUserId = null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  async getTestToken(axios, baseURL) {
    if (this.testToken) return this.testToken;

    try {
      const userData = {
        name: "API –¢–µ—Å—Ç –£—Ä–æ–≤–Ω–µ–π",
        email: `api.level.test.${Date.now()}@example.com`,
        password: "password123",
      };

      const registerResponse = await axios.post(
        `${baseURL}/api/users/register`,
        userData
      );
      this.testToken = registerResponse.data.data.token;
      this.testUserId = registerResponse.data.data.user.id;

      console.log(
        `‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è API —Ç–µ—Å—Ç–æ–≤: ${this.testUserId}`
      );
      return this.testToken;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è API:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç 1: GET /api/users/progress-stats - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async testGetProgressStats(axios, baseURL) {
    console.log("\nüß™ API –¢–µ—Å—Ç 1: GET /api/users/progress-stats");

    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      const response = await axios.get(`${baseURL}/api/users/progress-stats`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      const data = response.data;
      const stats = data.data.progressStats;

      const requiredFields = [
        "currentLevel",
        "completedTopics",
        "nextLevel",
        "topicsToNextLevel",
      ];
      const hasAllFields = requiredFields.every((field) =>
        stats.hasOwnProperty(field)
      );

      if (
        response.status === 200 &&
        data.success === true &&
        hasAllFields &&
        typeof stats.currentLevel === "string" &&
        typeof stats.completedTopics === "number"
      ) {
        console.log("‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:");
        console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${stats.currentLevel}`);
        console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏: ${stats.completedTopics}`);
        console.log(
          `   –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${stats.nextLevel || "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π"}`
        );
        return true;
      } else {
        console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:", data);
        return false;
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        error.response?.data || error.message
      );
      return false;
    }
  }

  // –¢–µ—Å—Ç 2: POST /api/users/recalculate-level - –ø–µ—Ä–µ—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è
  async testRecalculateLevel(axios, baseURL) {
    console.log("\nüß™ API –¢–µ—Å—Ç 2: POST /api/users/recalculate-level");

    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      const response = await axios.post(
        `${baseURL}/api/users/recalculate-level`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      const data = response.data;
      const levelInfo = data.data.levelInfo;

      if (
        response.status === 200 &&
        data.success === true &&
        levelInfo.hasOwnProperty("level") &&
        levelInfo.hasOwnProperty("completedTopics") &&
        typeof levelInfo.level === "string" &&
        typeof levelInfo.completedTopics === "number"
      ) {
        console.log("‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å:");
        console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${levelInfo.level}`);
        console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏: ${levelInfo.completedTopics}`);
        return true;
      } else {
        console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –ø–µ—Ä–µ—Å—á–µ—Ç–∞:", data);
        return false;
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:",
        error.response?.data || error.message
      );
      return false;
    }
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
  async testAuthenticationRequired(axios, baseURL) {
    console.log("\nüß™ API –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

    try {
      let authTestsPassed = 0;
      let authTestsTotal = 2;

      // –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è /progress-stats
      try {
        await axios.get(`${baseURL}/api/users/progress-stats`);
        console.log("‚ùå Endpoint /progress-stats –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      } catch (error) {
        if (error.response?.status === 401) {
          console.log(
            "‚úÖ Endpoint /progress-stats –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
          );
          authTestsPassed++;
        } else {
          console.log(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è /progress-stats:",
            error.response?.status
          );
        }
      }

      // –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è /recalculate-level
      try {
        await axios.post(`${baseURL}/api/users/recalculate-level`, {});
        console.log("‚ùå Endpoint /recalculate-level –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      } catch (error) {
        if (error.response?.status === 401) {
          console.log(
            "‚úÖ Endpoint /recalculate-level –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
          );
          authTestsPassed++;
        } else {
          console.log(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è /recalculate-level:",
            error.response?.status
          );
        }
      }

      return authTestsPassed === authTestsTotal;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
  async testInvalidToken(axios, baseURL) {
    console.log("\nüß™ API –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");

    try {
      const invalidToken = "invalid.jwt.token";
      let invalidTokenTests = 0;
      let totalTests = 2;

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è /progress-stats
      try {
        await axios.get(`${baseURL}/api/users/progress-stats`, {
          headers: {
            Authorization: `Bearer ${invalidToken}`,
          },
        });
        console.log("‚ùå Endpoint /progress-stats –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω");
      } catch (error) {
        if (error.response?.status === 401 || error.response?.status === 403) {
          console.log(
            "‚úÖ Endpoint /progress-stats –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω"
          );
          invalidTokenTests++;
        } else {
          console.log(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è /progress-stats:",
            error.response?.status
          );
        }
      }

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è /recalculate-level
      try {
        await axios.post(
          `${baseURL}/api/users/recalculate-level`,
          {},
          {
            headers: {
              Authorization: `Bearer ${invalidToken}`,
            },
          }
        );
        console.log(
          "‚ùå Endpoint /recalculate-level –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω"
        );
      } catch (error) {
        if (error.response?.status === 401 || error.response?.status === 403) {
          console.log(
            "‚úÖ Endpoint /recalculate-level –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω"
          );
          invalidTokenTests++;
        } else {
          console.log(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è /recalculate-level:",
            error.response?.status
          );
        }
      }

      return invalidTokenTests === totalTests;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:", error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  async testCORSHeaders(axios, baseURL) {
    console.log("\nüß™ API –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");

    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      const response = await axios.get(`${baseURL}/api/users/progress-stats`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const headers = response.headers;
      const hasCORSHeaders =
        headers["access-control-allow-origin"] !== undefined ||
        headers["Access-Control-Allow-Origin"] !== undefined;

      if (hasCORSHeaders) {
        console.log("‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
        return true;
      } else {
        console.log(
          "‚ö†Ô∏è CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞)"
        );
        return true; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ CORS —Ç–µ—Å—Ç–∞:", error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  async testContentTypeHeaders(axios, baseURL) {
    console.log("\nüß™ API –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");

    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      const response = await axios.get(`${baseURL}/api/users/progress-stats`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      const contentType = response.headers["content-type"];

      if (contentType && contentType.includes("application/json")) {
        console.log(
          "‚úÖ Content-Type –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ application/json"
        );
        return true;
      } else {
        console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Content-Type:", contentType);
        return false;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Content-Type:", error.message);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö API —Ç–µ—Å—Ç–æ–≤
  async runAllAPITests(axios, baseURL) {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π");
    console.log("=".repeat(60));

    const tests = [
      () => this.testGetProgressStats(axios, baseURL),
      () => this.testRecalculateLevel(axios, baseURL),
      () => this.testAuthenticationRequired(axios, baseURL),
      () => this.testInvalidToken(axios, baseURL),
      () => this.testCORSHeaders(axios, baseURL),
      () => this.testContentTypeHeaders(axios, baseURL),
    ];

    let passed = 0;
    let failed = 0;

    for (const test of tests) {
      try {
        const result = await test();
        if (result) {
          passed++;
        } else {
          failed++;
        }
      } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞:", error.message);
        failed++;
      }
    }

    console.log("\n" + "=".repeat(60));
    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π:");
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
    console.log(
      `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passed / (passed + failed)) * 100).toFixed(1)}%`
    );

    return { passed, failed, successRate: (passed / (passed + failed)) * 100 };
  }
}

module.exports = LevelAPITests;
