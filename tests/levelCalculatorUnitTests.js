// –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
const {
  calculateUserLevel,
  getUserProgressStats,
} = require("../utils/levelCalculator");

class LevelCalculatorUnitTests {
  // –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ calculateUserLevel
  testCalculateUserLevel() {
    console.log("\nüß™ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç: –§—É–Ω–∫—Ü–∏—è calculateUserLevel");

    const testCases = [
      { input: 0, expected: "–ù–æ–≤–∏—á–æ–∫", description: "0 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 4, expected: "–ù–æ–≤–∏—á–æ–∫", description: "4 —Ç–æ–ø–∏–∫–∞" },
      { input: 5, expected: "–°—Ä–µ–¥–Ω–∏–π", description: "5 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 19, expected: "–°—Ä–µ–¥–Ω–∏–π", description: "19 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 20, expected: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", description: "20 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 49, expected: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", description: "49 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 50, expected: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", description: "50 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 99, expected: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", description: "99 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 100, expected: "–≠–∫—Å–ø–µ—Ä—Ç", description: "100 —Ç–æ–ø–∏–∫–æ–≤" },
      { input: 150, expected: "–≠–∫—Å–ø–µ—Ä—Ç", description: "150 —Ç–æ–ø–∏–∫–æ–≤" },
    ];

    let passed = 0;
    let failed = 0;

    for (const testCase of testCases) {
      const result = calculateUserLevel(testCase.input);
      if (result === testCase.expected) {
        console.log(`‚úÖ ${testCase.description}: ${result}`);
        passed++;
      } else {
        console.log(
          `‚ùå ${testCase.description}: –æ–∂–∏–¥–∞–ª—Å—è "${testCase.expected}", –ø–æ–ª—É—á–µ–Ω "${result}"`
        );
        failed++;
      }
    }

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed} –ø—Ä–æ–π–¥–µ–Ω–æ, ${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
    return { passed, failed };
  }

  // –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  testBoundaryValues() {
    console.log("\nüß™ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è");

    const boundaryTests = [
      { input: -1, expected: "–ù–æ–≤–∏—á–æ–∫", description: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" },
      { input: 4.9, expected: "–ù–æ–≤–∏—á–æ–∫", description: "4.9 —Ç–æ–ø–∏–∫–∞ (–¥—Ä–æ–±–Ω–æ–µ)" },
      { input: 5.1, expected: "–°—Ä–µ–¥–Ω–∏–π", description: "5.1 —Ç–æ–ø–∏–∫–∞ (–¥—Ä–æ–±–Ω–æ–µ)" },
      {
        input: 999999,
        expected: "–≠–∫—Å–ø–µ—Ä—Ç",
        description: "–û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ",
      },
    ];

    let passed = 0;
    let failed = 0;

    for (const testCase of boundaryTests) {
      const result = calculateUserLevel(testCase.input);
      if (result === testCase.expected) {
        console.log(`‚úÖ ${testCase.description}: ${result}`);
        passed++;
      } else {
        console.log(
          `‚ùå ${testCase.description}: –æ–∂–∏–¥–∞–ª—Å—è "${testCase.expected}", –ø–æ–ª—É—á–µ–Ω "${result}"`
        );
        failed++;
      }
    }

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed} –ø—Ä–æ–π–¥–µ–Ω–æ, ${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
    return { passed, failed };
  }

  // –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  testNextLevelLogic() {
    console.log("\nüß™ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç: –õ–æ–≥–∏–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è");

    const nextLevelTests = [
      {
        completedTopics: 0,
        expectedCurrent: "–ù–æ–≤–∏—á–æ–∫",
        expectedNext: "–°—Ä–µ–¥–Ω–∏–π",
        expectedToNext: 5,
      },
      {
        completedTopics: 3,
        expectedCurrent: "–ù–æ–≤–∏—á–æ–∫",
        expectedNext: "–°—Ä–µ–¥–Ω–∏–π",
        expectedToNext: 2,
      },
      {
        completedTopics: 15,
        expectedCurrent: "–°—Ä–µ–¥–Ω–∏–π",
        expectedNext: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        expectedToNext: 5,
      },
      {
        completedTopics: 45,
        expectedCurrent: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        expectedNext: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
        expectedToNext: 5,
      },
      {
        completedTopics: 75,
        expectedCurrent: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
        expectedNext: "–≠–∫—Å–ø–µ—Ä—Ç",
        expectedToNext: 25,
      },
      {
        completedTopics: 150,
        expectedCurrent: "–≠–∫—Å–ø–µ—Ä—Ç",
        expectedNext: null,
        expectedToNext: 0,
      },
    ];

    let passed = 0;
    let failed = 0;

    for (const testCase of nextLevelTests) {
      const currentLevel = calculateUserLevel(testCase.completedTopics);

      // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ getUserProgressStats)
      let nextLevel = null;
      let topicsToNextLevel = 0;

      if (testCase.completedTopics < 5) {
        nextLevel = "–°—Ä–µ–¥–Ω–∏–π";
        topicsToNextLevel = 5 - testCase.completedTopics;
      } else if (testCase.completedTopics < 20) {
        nextLevel = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π";
        topicsToNextLevel = 20 - testCase.completedTopics;
      } else if (testCase.completedTopics < 50) {
        nextLevel = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª";
        topicsToNextLevel = 50 - testCase.completedTopics;
      } else if (testCase.completedTopics < 100) {
        nextLevel = "–≠–∫—Å–ø–µ—Ä—Ç";
        topicsToNextLevel = 100 - testCase.completedTopics;
      }

      const allCorrect =
        currentLevel === testCase.expectedCurrent &&
        nextLevel === testCase.expectedNext &&
        topicsToNextLevel === testCase.expectedToNext;

      if (allCorrect) {
        console.log(
          `‚úÖ ${testCase.completedTopics} —Ç–æ–ø–∏–∫–æ–≤: ${currentLevel} ‚Üí ${
            nextLevel || "–º–∞–∫—Å"
          } (${topicsToNextLevel})`
        );
        passed++;
      } else {
        console.log(`‚ùå ${testCase.completedTopics} —Ç–æ–ø–∏–∫–æ–≤:`);
        console.log(
          `   –û–∂–∏–¥–∞–ª—Å—è: ${testCase.expectedCurrent} ‚Üí ${
            testCase.expectedNext || "–º–∞–∫—Å"
          } (${testCase.expectedToNext})`
        );
        console.log(
          `   –ü–æ–ª—É—á–µ–Ω:  ${currentLevel} ‚Üí ${
            nextLevel || "–º–∞–∫—Å"
          } (${topicsToNextLevel})`
        );
        failed++;
      }
    }

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed} –ø—Ä–æ–π–¥–µ–Ω–æ, ${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
    return { passed, failed };
  }

  // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  testPerformance() {
    console.log("\nüß™ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");

    const iterations = 100000;
    const startTime = Date.now();

    for (let i = 0; i < iterations; i++) {
      calculateUserLevel(Math.floor(Math.random() * 200));
    }

    const endTime = Date.now();
    const duration = endTime - startTime;
    const opsPerSecond = Math.round((iterations / duration) * 1000);

    console.log(`‚úÖ ${iterations} –≤—ã–∑–æ–≤–æ–≤ –∑–∞ ${duration}–º—Å`);
    console.log(
      `‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${opsPerSecond.toLocaleString()} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`
    );

    // –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ
    const passed = opsPerSecond > 10000 ? 1 : 0;
    const failed = passed ? 0 : 1;

    return { passed, failed };
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
  runAllUnitTests() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π");
    console.log("=".repeat(60));

    const tests = [
      () => this.testCalculateUserLevel(),
      () => this.testBoundaryValues(),
      () => this.testNextLevelLogic(),
      () => this.testPerformance(),
    ];

    let totalPassed = 0;
    let totalFailed = 0;

    for (const test of tests) {
      try {
        const result = test();
        totalPassed += result.passed;
        totalFailed += result.failed;
      } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–∞:", error.message);
        totalFailed++;
      }
    }

    console.log("\n" + "=".repeat(60));
    console.log("üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤:");
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed}`);
    console.log(
      `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(
        (totalPassed / (totalPassed + totalFailed)) *
        100
      ).toFixed(1)}%`
    );

    return { passed: totalPassed, failed: totalFailed };
  }
}

module.exports = LevelCalculatorUnitTests;
