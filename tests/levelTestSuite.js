// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
const axios = require("axios");
const UserLevelTests = require("./userLevelTests");
const LevelCalculatorUnitTests = require("./levelCalculatorUnitTests");
const LevelAPITests = require("./levelAPITests");

class LevelTestSuite {
  constructor(baseURL = "http://localhost:3000") {
    this.baseURL = baseURL;
    this.axios = axios;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  async checkServerAvailability() {
    try {
      const response = await this.axios.get(`${this.baseURL}/api/health`, {
        timeout: 5000,
      });
      return response.status === 200;
    } catch (error) {
      // –ï—Å–ª–∏ endpoint /api/health –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ª—é–±–æ–π –¥—Ä—É–≥–æ–π
      try {
        await this.axios.get(this.baseURL, { timeout: 5000 });
        return true;
      } catch (secondError) {
        return false;
      }
    }
  }

  // –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç —Å–µ—Ä–≤–µ—Ä–∞)
  async runUnitTests() {
    console.log("üîß –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç —Å–µ—Ä–≤–µ—Ä–∞)");
    console.log("=".repeat(60));

    const unitTests = new LevelCalculatorUnitTests();
    return await unitTests.runAllUnitTests();
  }

  // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç—Ä–µ–±—É—é—Ç —Å–µ—Ä–≤–µ—Ä–∞)
  async runIntegrationTests() {
    console.log("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...");

    const serverAvailable = await this.checkServerAvailability();
    if (!serverAvailable) {
      console.log("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã.");
      console.log("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm start");
      return { passed: 0, failed: 0, skipped: true };
    }

    console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...");

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userLevelTests = new UserLevelTests();
    const userLevelResults = await userLevelTests.runAllTests(
      this.axios,
      this.baseURL
    );

    // –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤
    const apiTests = new LevelAPITests();
    const apiResults = await apiTests.runAllAPITests(this.axios, this.baseURL);

    return {
      passed: userLevelResults.passed + apiResults.passed,
      failed: userLevelResults.failed + apiResults.failed,
      userLevelResults,
      apiResults,
    };
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log("üéØ –ü–û–õ–ù–´–ô –ù–ê–ë–û–† –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –£–†–û–í–ù–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø");
    console.log("=".repeat(70));
    console.log(`üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
    console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${this.baseURL}`);
    console.log("=".repeat(70));

    const startTime = Date.now();

    // –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã
    const unitResults = await this.runUnitTests();

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const integrationResults = await this.runIntegrationTests();

    const endTime = Date.now();
    const totalTime = ((endTime - startTime) / 1000).toFixed(2);

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalPassed = unitResults.passed + integrationResults.passed;
    const totalFailed = unitResults.failed + integrationResults.failed;
    const totalTests = totalPassed + totalFailed;
    const successRate =
      totalTests > 0 ? ((totalPassed / totalTests) * 100).toFixed(1) : 0;

    console.log("\n" + "=".repeat(70));
    console.log("üìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
    console.log("=".repeat(70));
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime} —Å–µ–∫—É–Ω–¥`);
    console.log(`üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

    if (integrationResults.skipped) {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`);
    }

    console.log("\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
    console.log(
      `   üîß –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã: ${unitResults.passed}/${
        unitResults.passed + unitResults.failed
      }`
    );

    if (!integrationResults.skipped) {
      console.log(
        `   üë§ –¢–µ—Å—Ç—ã —É—Ä–æ–≤–Ω–µ–π: ${integrationResults.userLevelResults.passed}/${
          integrationResults.userLevelResults.passed +
          integrationResults.userLevelResults.failed
        }`
      );
      console.log(
        `   üåê API —Ç–µ—Å—Ç—ã: ${integrationResults.apiResults.passed}/${
          integrationResults.apiResults.passed +
          integrationResults.apiResults.failed
        }`
      );
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
    if (totalFailed === 0) {
      console.log(
        "   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
      );
    } else {
      console.log("   üîç –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ.");
      console.log("   üõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –∏ API endpoints.");
    }

    if (integrationResults.skipped) {
      console.log(
        "   üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
      );
    }

    console.log("\n" + "=".repeat(70));

    return {
      success: totalFailed === 0,
      totalTests,
      totalPassed,
      totalFailed,
      successRate: parseFloat(successRate),
      executionTime: parseFloat(totalTime),
      details: {
        unitTests: unitResults,
        integrationTests: integrationResults,
      },
    };
  }

  // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
  async runQuickTest() {
    console.log("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–†–û–í–ù–ï–ô");
    console.log("=".repeat(50));

    // –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
    const unitTests = new LevelCalculatorUnitTests();
    const result = unitTests.testCalculateUserLevel();

    console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞:");
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${result.passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${result.failed}`);

    return result.failed === 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async function runTestsFromCLI() {
  const args = process.argv.slice(2);
  const testSuite = new LevelTestSuite();

  if (args.includes("--quick")) {
    const success = await testSuite.runQuickTest();
    process.exit(success ? 0 : 1);
  } else if (args.includes("--unit-only")) {
    const results = await testSuite.runUnitTests();
    process.exit(results.failed === 0 ? 0 : 1);
  } else {
    const results = await testSuite.runAllTests();
    process.exit(results.success ? 0 : 1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTestsFromCLI().catch((error) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:", error);
    process.exit(1);
  });
}

module.exports = {
  LevelTestSuite,
  UserLevelTests,
  LevelCalculatorUnitTests,
  LevelAPITests,
};
