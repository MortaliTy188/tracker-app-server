const axios = require("axios");
const testData = require("./testData");

class NoteTests {
  constructor() {
    this.testToken = null;
    this.createdNoteId = null;
    this.topicId = null;
  }

  async getTestToken(axios, baseURL) {
    if (this.testToken) return this.testToken;

    try {
      const userData = testData.getTestUserData().admin;
      const response = await axios.post(`${baseURL}/api/users/login`, {
        email: userData.email,
        password: userData.password,
      });

      this.testToken = response.data.data.token;
      return this.testToken;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∑–∞–º–µ—Ç–æ–∫:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  async runAllTests(axios, baseURL) {
    console.log("üìù –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –∑–∞–º–µ—Ç–æ–∫...");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await this.getTestToken(axios, baseURL);
    if (!token) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤");
    }

    this.axiosInstance = axios.create({
      baseURL: baseURL,
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    await this.setupTestTopic();

    const tests = [
      { name: "1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏", method: this.testCreateNote },
      { name: "2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫", method: this.testGetAllNotes },
      { name: "3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID", method: this.testGetNoteById },
      { name: "4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏", method: this.testUpdateNote },
      { name: "5. –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫", method: this.testSearchNotes },
      { name: "6. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏", method: this.testRecentNotes },
      { name: "7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫", method: this.testNotesStats },
      { name: "8. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏", method: this.testDeleteNote },
    ];

    for (const test of tests) {
      try {
        console.log(`\n${test.name}...`);
        await test.method.call(this);
        console.log(`‚úÖ ${test.name.substring(3)}: –£—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        console.error(
          `‚ùå ${test.name.substring(3)}: –û—à–∏–±–∫–∞ - ${error.message}`
        );
        throw error;
      }
    }

    console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–º–µ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
  }

  async setupTestTopic() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–º—ã
      const topicsResponse = await this.axiosInstance.get("/api/topics");
      if (topicsResponse.data.data.topics.length > 0) {
        this.topicId = topicsResponse.data.data.topics[0].id;
        return;
      }

      // –ï—Å–ª–∏ —Ç–µ–º –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É
      const skillsResponse = await this.axiosInstance.get("/api/skills");
      let skillId;

      if (skillsResponse.data.data.skills.length > 0) {
        skillId = skillsResponse.data.data.skills[0].id;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–∞–≤—ã–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const skillData = {
          name: "–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫",
          description: "–ù–∞–≤—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫",
          category_id: 1, // Use first category
        };
        const skillResponse = await this.axiosInstance.post(
          "/api/skills",
          skillData
        );
        skillId = skillResponse.data.data.skill.id;
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
      const topicData = {
        name: "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫",
        description: "–¢–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫",
        skill_id: skillId,
        status_id: 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å "–ù–µ –Ω–∞—á–∞—Ç–æ"
      };
      const topicResponse = await this.axiosInstance.post(
        "/api/topics",
        topicData
      );
      this.topicId = topicResponse.data.data.topic.id;
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç–µ–º—É: ${error.message}`);
    }
  }

  async testCreateNote() {
    const noteData = {
      title: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
      content: "–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
      topic_id: this.topicId,
    };

    const response = await this.axiosInstance.post("/api/notes", noteData);

    if (response.status !== 201) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    if (!response.data.data || !response.data.data.note) {
      throw new Error("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏");
    }

    const note = response.data.data.note;
    if (note.title !== noteData.title || note.content !== noteData.content) {
      throw new Error("–î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º");
    }

    this.createdNoteId = note.id;
  }

  async testGetAllNotes() {
    const response = await this.axiosInstance.get("/api/notes");

    if (response.status !== 200) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    if (!Array.isArray(response.data.data.notes)) {
      throw new Error("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –∑–∞–º–µ—Ç–æ–∫");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    const foundNote = response.data.data.notes.find(
      (note) => note.id === this.createdNoteId
    );
    if (!foundNote) {
      throw new Error("–°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ");
    }
  }

  async testGetNoteById() {
    if (!this.createdNoteId) {
      throw new Error("–°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞");
    }

    const response = await this.axiosInstance.get(
      `/api/notes/${this.createdNoteId}`
    );

    if (response.status !== 200) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    if (!response.data.data || !response.data.data.note) {
      throw new Error("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏");
    }

    const note = response.data.data.note;
    if (note.id !== this.createdNoteId) {
      throw new Error("ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º");
    }
  }

  async testUpdateNote() {
    if (!this.createdNoteId) {
      throw new Error("–°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞");
    }

    const updateData = {
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
      content: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏",
    };

    const response = await this.axiosInstance.put(
      `/api/notes/${this.createdNoteId}`,
      updateData
    );

    if (response.status !== 200) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    const getResponse = await this.axiosInstance.get(
      `/api/notes/${this.createdNoteId}`
    );
    const updatedNote = getResponse.data.data.note;

    if (
      updatedNote.title !== updateData.title ||
      updatedNote.content !== updateData.content
    ) {
      throw new Error("–î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    }
  }

  async testSearchNotes() {
    const response = await this.axiosInstance.get(
      "/api/notes/search?query=–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è"
    );

    if (response.status !== 200) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    if (!Array.isArray(response.data.data.notes)) {
      throw new Error("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª –Ω–∞—à—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
    const foundNote = response.data.data.notes.find(
      (note) => note.id === this.createdNoteId
    );
    if (!foundNote) {
      throw new Error("–ü–æ–∏—Å–∫ –Ω–µ –Ω–∞—à–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É");
    }
  }

  async testRecentNotes() {
    const response = await this.axiosInstance.get("/api/notes/recent?limit=5");

    if (response.status !== 200) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    if (!Array.isArray(response.data.data.notes)) {
      throw new Error("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–º–µ—Ç–æ–∫");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏–º–∏—Ç–æ–º
    if (response.data.data.notes.length > 5) {
      throw new Error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç");
    }
  }

  async testNotesStats() {
    const response = await this.axiosInstance.get("/api/notes/stats");

    if (response.status !== 200) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    if (!response.data.data) {
      throw new Error("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = response.data.data.stats;
    if (typeof stats.totalNotes !== "number") {
      throw new Error("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫");
    }
  }

  async testDeleteNote() {
    if (!this.createdNoteId) {
      throw new Error("–°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞");
    }

    const response = await this.axiosInstance.delete(
      `/api/notes/${this.createdNoteId}`
    );

    if (response.status !== 200) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error("–ü–æ–ª–µ success –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
    try {
      await this.axiosInstance.get(`/api/notes/${this.createdNoteId}`);
      throw new Error("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞");
    } catch (error) {
      if (error.response && error.response.status === 404) {
        // –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –∑–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞
        return;
      }
      throw error;
    }
  }
}

module.exports = new NoteTests();
