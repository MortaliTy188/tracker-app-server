// –¢–µ—Å—Ç—ã –¥–ª—è API –Ω–∞–≤—ã–∫–æ–≤
const testData = require("./testData");

class SkillTests {
  constructor() {
    this.testToken = null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  async getTestToken(axios, baseURL) {
    if (this.testToken) return this.testToken;

    try {
      const userData = testData.getTestUserData().admin;
      const response = await axios.post(`${baseURL}/api/users/login`, {
        email: userData.email,
        password: userData.password,
      });

      this.testToken = response.data.data.token;
      return this.testToken;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞–≤—ã–∫–æ–≤:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤
  async testGetAllSkills(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/skills`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log(
        "‚úÖ –í—Å–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:",
        response.data.data.length,
        "–Ω–∞–≤—ã–∫–æ–≤"
      );
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞
  async testCreateSkill(axios, baseURL, token) {
    try {
      const skillData = {
        name: "–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
        category_id: 1, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      };

      const response = await axios.post(`${baseURL}/api/skills`, skillData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      console.log("‚úÖ –ù–∞–≤—ã–∫ —Å–æ–∑–¥–∞–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ –ø–æ ID
  async testGetSkillById(axios, baseURL, token, skillId) {
    try {
      const response = await axios.get(`${baseURL}/api/skills/${skillId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –ù–∞–≤—ã–∫ –ø–æ–ª—É—á–µ–Ω –ø–æ ID:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ –ø–æ ID:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
  async testUpdateSkill(axios, baseURL, token, skillId) {
    try {
      const updateData = {
        name: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–∞–≤—ã–∫",
        description: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞",
      };

      const response = await axios.put(
        `${baseURL}/api/skills/${skillId}`,
        updateData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ –ù–∞–≤—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
  async testGetSkillStats(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/skills/stats`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≤—ã–∫–æ–≤:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º –Ω–∞–≤—ã–∫–∞
  async testGetSkillTopics(axios, baseURL, token, skillId) {
    try {
      const response = await axios.get(
        `${baseURL}/api/skills/${skillId}/topics`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –¢–µ–º—ã –Ω–∞–≤—ã–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º –Ω–∞–≤—ã–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
  async testDeleteSkill(axios, baseURL, token, skillId) {
    try {
      const response = await axios.delete(`${baseURL}/api/skills/${skillId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –ù–∞–≤—ã–∫ —É–¥–∞–ª–µ–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞–≤—ã–∫–æ–≤
  async runAllTests(axios, baseURL) {
    console.log("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –Ω–∞–≤—ã–∫–æ–≤...");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await this.getTestToken(axios, baseURL);
    if (!token) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤");
    }

    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤
    console.log("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤...");
    await this.testGetAllSkills(axios, baseURL, token);

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞
    console.log("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞...");
    const newSkill = await this.testCreateSkill(axios, baseURL, token);

    if (newSkill && newSkill.data && newSkill.data.skill) {
      const skillId = newSkill.data.skill.id;

      // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ ID
      console.log("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ ID...");
      await this.testGetSkillById(axios, baseURL, token, skillId);

      // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
      console.log("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞...");
      await this.testUpdateSkill(axios, baseURL, token, skillId);

      // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≤—ã–∫–æ–≤...");
      await this.testGetSkillStats(axios, baseURL, token);

      // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º –Ω–∞–≤—ã–∫–∞
      console.log("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º –Ω–∞–≤—ã–∫–∞...");
      await this.testGetSkillTopics(axios, baseURL, token, skillId);

      // 7. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
      console.log("\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞...");
      await this.testDeleteSkill(axios, baseURL, token, skillId);
    }

    console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–∞–≤—ã–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
  }
}

module.exports = new SkillTests();
