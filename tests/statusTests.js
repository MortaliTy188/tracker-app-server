// –¢–µ—Å—Ç—ã –¥–ª—è API —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç–µ–º
const testData = require("./testData");

class StatusTests {
  constructor() {
    this.testToken = null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  async getTestToken(axios, baseURL) {
    if (this.testToken) return this.testToken;

    try {
      const userData = testData.getTestUserData().admin;
      const response = await axios.post(`${baseURL}/api/users/login`, {
        email: userData.email,
        password: userData.password,
      });

      this.testToken = response.data.data.token;
      return this.testToken;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async testCreateDefaultStatuses(axios, baseURL) {
    try {
      const response = await axios.post(
        `${baseURL}/api/statuses/default`,
        {},
        {
          headers: { "Content-Type": "application/json" },
        }
      );

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  async testGetAllStatuses(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/statuses`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log(
        "‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—É—á–µ–Ω—ã:",
        response.data.data.length,
        "—Å—Ç–∞—Ç—É—Å–æ–≤"
      );
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  async testCreateStatus(axios, baseURL, token) {
    try {
      const statusData = {
        name: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å",
        color: "#FF5733",
      };

      const response = await axios.post(`${baseURL}/api/statuses`, statusData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID
  async testGetStatusById(axios, baseURL, token, statusId) {
    try {
      const response = await axios.get(`${baseURL}/api/statuses/${statusId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω –ø–æ ID:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  async testUpdateStatus(axios, baseURL, token, statusId) {
    try {
      const updateData = {
        name: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å",
        color: "#33FF57",
      };

      const response = await axios.put(
        `${baseURL}/api/statuses/${statusId}`,
        updateData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  async testGetStatusStats(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/statuses/stats`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  async testDeleteStatus(axios, baseURL, token, statusId) {
    try {
      const response = await axios.delete(
        `${baseURL}/api/statuses/${statusId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
  async runAllTests(axios, baseURL) {
    console.log("üè∑Ô∏è  –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Å—Ç–∞—Ç—É—Å–æ–≤...");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await this.getTestToken(axios, baseURL);
    if (!token) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤");
    }

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...");
    await this.testCreateDefaultStatuses(axios, baseURL);

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    console.log("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...");
    const allStatuses = await this.testGetAllStatuses(axios, baseURL, token);

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    console.log("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...");
    const newStatus = await this.testCreateStatus(axios, baseURL, token);

    if (newStatus && newStatus.data && newStatus.data.status) {
      const statusId = newStatus.data.status.id;

      // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID
      console.log("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID...");
      await this.testGetStatusById(axios, baseURL, token, statusId);

      // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      console.log("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...");
      await this.testUpdateStatus(axios, baseURL, token, statusId);

      // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤...");
      await this.testGetStatusStats(axios, baseURL, token);

      // 7. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      console.log("\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...");
      await this.testDeleteStatus(axios, baseURL, token, statusId);
    }

    console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
  }
}

module.exports = new StatusTests();
