// –¢–µ—Å—Ç—ã –¥–ª—è API —Ç–µ–º
const testData = require("./testData");

class TopicTests {
  constructor() {
    this.testToken = null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  async getTestToken(axios, baseURL) {
    if (this.testToken) return this.testToken;

    try {
      const userData = testData.getTestUserData().admin;
      const response = await axios.post(`${baseURL}/api/users/login`, {
        email: userData.email,
        password: userData.password,
      });

      this.testToken = response.data.data.token;
      return this.testToken;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ç–µ–º:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –¥–ª—è —Ç–µ–º
  async createTestSkill(axios, baseURL, token) {
    try {
      const skillData = {
        name: "–ù–∞–≤—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º",
        description: "–í—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º –≤ —Ç–µ—Å—Ç–∞—Ö",
        category_id: 1,
      };

      const response = await axios.post(`${baseURL}/api/skills`, skillData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      return response.data.data.skill.id;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–º
  async testGetAllTopics(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/topics`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –í—Å–µ —Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω—ã:", response.data.data.length, "—Ç–µ–º");
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
  async testCreateTopic(axios, baseURL, token, skillId) {
    try {
      const topicData = {
        name: "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
        skill_id: skillId,
        status_id: 1, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      };

      const response = await axios.post(`${baseURL}/api/topics`, topicData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      console.log("‚úÖ –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ ID
  async testGetTopicById(axios, baseURL, token, topicId) {
    try {
      const response = await axios.get(`${baseURL}/api/topics/${topicId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –¢–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ ID:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ ID:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
  async testUpdateTopic(axios, baseURL, token, topicId) {
    try {
      const updateData = {
        name: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞",
        description: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã",
      };

      const response = await axios.put(
        `${baseURL}/api/topics/${topicId}`,
        updateData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ –¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–º—ã
  async testUpdateTopicStatus(axios, baseURL, token, topicId) {
    try {
      const statusData = {
        status_id: 2, // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ —Å—Ç–∞—Ç—É—Å "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
      };

      const response = await axios.put(
        `${baseURL}/api/topics/${topicId}/status`,
        statusData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å —Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–º—ã:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–º
  async testGetTopicStats(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/topics/stats`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–º –ø–æ–ª—É—á–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–º:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —Ç–µ–º—ã
  async testGetTopicNotes(axios, baseURL, token, topicId) {
    try {
      const response = await axios.get(
        `${baseURL}/api/topics/${topicId}/notes`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –ó–∞–º–µ—Ç–∫–∏ —Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω—ã:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —Ç–µ–º—ã:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã
  async testDeleteTopic(axios, baseURL, token, topicId) {
    try {
      const response = await axios.delete(`${baseURL}/api/topics/${topicId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ç–µ–º
  async runAllTests(axios, baseURL) {
    console.log("üìö –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Ç–µ–º...");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await this.getTestToken(axios, baseURL);
    if (!token) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤");
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫
    console.log("\n–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è —Ç–µ–º...");
    const skillId = await this.createTestSkill(axios, baseURL, token);
    if (!skillId) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫");
    }

    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º
    console.log("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º...");
    await this.testGetAllTopics(axios, baseURL, token);

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
    console.log("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã...");
    const newTopic = await this.testCreateTopic(axios, baseURL, token, skillId);

    if (newTopic && newTopic.data && newTopic.data.topic) {
      const topicId = newTopic.data.topic.id;

      // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ ID
      console.log("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ ID...");
      await this.testGetTopicById(axios, baseURL, token, topicId);

      // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
      console.log("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã...");
      await this.testUpdateTopic(axios, baseURL, token, topicId);

      // 5. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–º—ã
      console.log("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–º—ã...");
      await this.testUpdateTopicStatus(axios, baseURL, token, topicId);

      // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–º...");
      await this.testGetTopicStats(axios, baseURL, token);

      // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Ç–µ–º—ã
      console.log("\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Ç–µ–º—ã...");
      await this.testGetTopicNotes(axios, baseURL, token, topicId);

      // 8. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã
      console.log("\n8. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã...");
      await this.testDeleteTopic(axios, baseURL, token, topicId);
    }

    console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
  }
}

module.exports = new TopicTests();
