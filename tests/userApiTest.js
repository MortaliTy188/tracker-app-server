// –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API

const testUserAPI = {
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  testUser: {
    name: "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    email: "test@example.com",
    password: "password123",
  },

  // –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  registerUser: `
    POST /api/users/register
    Content-Type: application/json
    
    {
        "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "email": "ivan@example.com",
        "password": "password123"
    }
    `,

  // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  loginUser: `
    POST /api/users/login
    Content-Type: application/json
    
    {
        "email": "ivan@example.com",
        "password": "password123"
    }
    `,

  // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  getProfile: `
    GET /api/users/profile
    Authorization: Bearer <JWT_TOKEN>
    `,

  // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  updateProfile: `
    PUT /api/users/profile
    Authorization: Bearer <JWT_TOKEN>
    Content-Type: application/json
    
    {
        "name": "–ù–æ–≤–æ–µ –ò–º—è",
        "email": "newemail@example.com"
    }
    `,

  // 5. –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
  changePassword: `
    PUT /api/users/change-password
    Authorization: Bearer <JWT_TOKEN>
    Content-Type: application/json
    
    {
        "currentPassword": "password123",
        "newPassword": "newpassword456"
    }
    `,

  // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  getFullInfo: `
    GET /api/users/full-info
    Authorization: Bearer <JWT_TOKEN>
    `,

  // 7. –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
  deleteAccount: `
    DELETE /api/users/delete-account
    Authorization: Bearer <JWT_TOKEN>
    Content-Type: application/json
    
    {
        "password": "password123"
    }
    `,

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async testRegistration(axios, baseURL) {
    try {
      const response = await axios.post(`${baseURL}/api/users/register`, {
        name: "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        email: `test${Date.now()}@example.com`,
        password: "password123",
      });

      console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", response.data);
      return response.data.data.token;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        error.response?.data || error.message
      );
      return null;
    }
  },

  async testLogin(
    axios,
    baseURL,
    email = "test@example.com",
    password = "password123"
  ) {
    try {
      const response = await axios.post(`${baseURL}/api/users/login`, {
        email,
        password,
      });

      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", response.data);
      return response.data.data.token;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        error.response?.data || error.message
      );
      return null;
    }
  },

  async testGetProfile(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/users/profile`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:",
        error.response?.data || error.message
      );
      return null;
    }
  },

  async testUpdateProfile(axios, baseURL, token, updateData) {
    try {
      const response = await axios.put(
        `${baseURL}/api/users/profile`,
        updateData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:",
        error.response?.data || error.message
      );
      return null;
    }
  },
  async testGetFullInfo(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/users/full-info`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (response.data.success && response.data.data) {
        const userData = response.data.data.user;
        const requiredFields = ['id', 'name', 'email', 'level', 'registrationDate', 'avatar'];
        const missingFields = requiredFields.filter(field => !(field in userData));
        
        if (missingFields.length > 0) {
          console.log(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`);
        } else {
          console.log("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (–≤–∫–ª—é—á–∞—è avatar)");
        }
        
        console.log("‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:", {
          user: {
            id: userData.id,
            name: userData.name,
            email: userData.email,
            level: userData.level,
            avatar: userData.avatar || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
          },
          stats: response.data.data.stats
        });
      } else {
        console.log("‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:", response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        error.response?.data || error.message
      );
      return null;
    }
  },

  // –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async runFullTest(axios, baseURL) {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n");

    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    console.log("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");
    const token = await this.testRegistration(axios, baseURL);
    if (!token) return false;

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    console.log("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...");
    await this.testGetProfile(axios, baseURL, token);

    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    console.log("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...");
    await this.testUpdateProfile(axios, baseURL, token, {
      name: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ò–º—è",
    });

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    console.log("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...");
    await this.testGetFullInfo(axios, baseURL, token);

    console.log("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
    return true;
  },
};

module.exports = testUserAPI;

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/*
const axios = require('axios');
const testUserAPI = require('./userApiTest');

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
testUserAPI.runFullTest(axios, 'http://localhost:3000')
    .then(success => {
        if (success) {
            console.log('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
        }
    });
*/
