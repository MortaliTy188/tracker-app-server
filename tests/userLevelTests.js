// –¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const testData = require("./testData");

class UserLevelTests {
  constructor() {
    this.testToken = null;
    this.testUserId = null;
    this.testSkillId = null;
    this.createdTopics = [];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  async getTestToken(axios, baseURL) {
    if (this.testToken) return this.testToken;

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        name: "–¢–µ—Å—Ç –£—Ä–æ–≤–Ω–µ–π",
        email: `level.test.${Date.now()}@example.com`,
        password: "password123",
      };

      const registerResponse = await axios.post(`${baseURL}/api/users/register`, userData);
      this.testToken = registerResponse.data.data.token;
      this.testUserId = registerResponse.data.data.user.id;
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${this.testUserId}`);
      return this.testToken;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞
  async createTestSkill(axios, baseURL, token) {
    try {
      const skillData = {
        name: `–ù–∞–≤—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π ${Date.now()}`,
        description: "–í—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π",
        category_id: 1,
      };

      const response = await axios.post(`${baseURL}/api/skills`, skillData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      this.testSkillId = response.data.data.skill.id;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫ —Å ID: ${this.testSkillId}`);
      return this.testSkillId;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
  async createTestTopic(axios, baseURL, token, skillId, name, progress = 0) {
    try {
      const topicData = {
        name: name,
        description: `–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–ø–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω–µ–π`,
        skill_id: skillId,
        progress: progress,
      };

      const response = await axios.post(`${baseURL}/api/topics`, topicData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      const topicId = response.data.data.topic.id;
      this.createdTopics.push(topicId);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ "${name}" —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ${progress}%`);
      return topicId;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–æ–ø–∏–∫–∞
  async updateTopicProgress(axios, baseURL, token, topicId, progress) {
    try {
      const response = await axios.put(
        `${baseURL}/api/topics/${topicId}/progress`,
        { progress },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–æ–ø–∏–∫–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async getProgressStats(axios, baseURL, token) {
    try {
      const response = await axios.get(`${baseURL}/api/users/progress-stats`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      return response.data.data.progressStats;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –ü–µ—Ä–µ—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è
  async recalculateLevel(axios, baseURL, token) {
    try {
      const response = await axios.post(`${baseURL}/api/users/recalculate-level`, {}, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      return response.data.data.levelInfo;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async cleanup(axios, baseURL, token) {
    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
      for (const topicId of this.createdTopics) {
        try {
          await axios.delete(`${baseURL}/api/topics/${topicId}`, {
            headers: { Authorization: `Bearer ${token}` },
          });
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫ ${topicId}`);
        }
      }

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫
      if (this.testSkillId) {
        try {
          await axios.delete(`${baseURL}/api/skills/${this.testSkillId}`, {
            headers: { Authorization: `Bearer ${token}` },
          });
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫ ${this.testSkillId}`);
        }
      }

      console.log("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error.message);
    }
  }

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async testInitialUserLevel(axios, baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    
    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      const stats = await this.getProgressStats(axios, baseURL, token);
      if (!stats) return false;

      if (stats.currentLevel === "–ù–æ–≤–∏—á–æ–∫" && stats.completedTopics === 0) {
        console.log("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: –ù–æ–≤–∏—á–æ–∫ —Å 0 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ç–æ–ø–∏–∫–∞–º–∏");
        return true;
      } else {
        console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:", stats);
        return false;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è:", error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–æ–≤
  async testLevelUpProgression(axios, baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–æ–≤");
    
    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      const skillId = await this.createTestSkill(axios, baseURL, token);
      if (!skillId) return false;

      // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º 6 —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è "–°—Ä–µ–¥–Ω–∏–π"
      const topicsToCreate = 6;
      const topicIds = [];

      for (let i = 1; i <= topicsToCreate; i++) {
        const topicId = await this.createTestTopic(
          axios, baseURL, token, skillId, 
          `–¢–æ–ø–∏–∫ –¥–ª—è —É—Ä–æ–≤–Ω—è ${i}`, 0
        );
        if (topicId) {
          topicIds.push(topicId);
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ–ø–∏–∫
          await this.updateTopicProgress(axios, baseURL, token, topicId, 100);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
      const stats = await this.getProgressStats(axios, baseURL, token);
      if (!stats) return false;

      if (stats.currentLevel === "–°—Ä–µ–¥–Ω–∏–π" && stats.completedTopics === topicsToCreate) {
        console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–≤—ã—à–µ–Ω –¥–æ "–°—Ä–µ–¥–Ω–∏–π" —Å ${topicsToCreate} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ç–æ–ø–∏–∫–∞–º–∏`);
        return true;
      } else {
        console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:", stats);
        return false;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:", error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async testLevelDowngrade(axios, baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
    
    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å 50%
      if (this.createdTopics.length > 0) {
        const lastTopicId = this.createdTopics[this.createdTopics.length - 1];
        await this.updateTopicProgress(axios, baseURL, token, lastTopicId, 50);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        const stats = await this.getProgressStats(axios, baseURL, token);
        if (!stats) return false;

        if (stats.currentLevel === "–ù–æ–≤–∏—á–æ–∫" && stats.completedTopics === 5) {
          console.log("‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ '–ù–æ–≤–∏—á–æ–∫' —Å 5 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ç–æ–ø–∏–∫–∞–º–∏");
          return true;
        } else {
          console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:", stats);
          return false;
        }
      } else {
        console.log("‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞");
        return false;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:", error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
  async testLevelRecalculation(axios, baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è");
    
    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      const levelInfo = await this.recalculateLevel(axios, baseURL, token);
      if (!levelInfo) return false;

      const stats = await this.getProgressStats(axios, baseURL, token);
      if (!stats) return false;

      if (levelInfo.level === stats.currentLevel && 
          levelInfo.completedTopics === stats.completedTopics) {
        console.log("‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:", levelInfo);
        return true;
      } else {
        console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è:");
        console.log("  –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞:", levelInfo);
        console.log("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", stats);
        return false;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è:", error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —É—Ä–æ–≤–Ω–µ–π
  async testLevelBoundaries(axios, baseURL) {
    console.log("\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —É—Ä–æ–≤–Ω–µ–π");
    
    try {
      const token = await this.getTestToken(axios, baseURL);
      if (!token) return false;

      // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" (20 —Ç–æ–ø–∏–∫–æ–≤)
      const currentStats = await this.getProgressStats(axios, baseURL, token);
      const topicsNeeded = 20 - currentStats.completedTopics;

      if (topicsNeeded > 0 && this.testSkillId) {
        for (let i = 1; i <= topicsNeeded; i++) {
          const topicId = await this.createTestTopic(
            axios, baseURL, token, this.testSkillId, 
            `–ì—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ø–∏–∫ ${i}`, 100
          );
        }
      }

      const finalStats = await this.getProgressStats(axios, baseURL, token);
      if (!finalStats) return false;

      if (finalStats.currentLevel === "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" && finalStats.completedTopics >= 20) {
        console.log(`‚úÖ –ì—Ä–∞–Ω–∏—Ü–∞ —É—Ä–æ–≤–Ω—è "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${finalStats.completedTopics} —Ç–æ–ø–∏–∫–æ–≤`);
        return true;
      } else {
        console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–≤–Ω—è:", finalStats);
        return false;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≥—Ä–∞–Ω–∏—Ü —É—Ä–æ–≤–Ω–µ–π:", error.message);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests(axios, baseURL) {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    console.log("=" .repeat(60));

    const tests = [
      () => this.testInitialUserLevel(axios, baseURL),
      () => this.testLevelUpProgression(axios, baseURL),
      () => this.testLevelDowngrade(axios, baseURL),
      () => this.testLevelRecalculation(axios, baseURL),
      () => this.testLevelBoundaries(axios, baseURL),
    ];

    let passed = 0;
    let failed = 0;

    for (const test of tests) {
      try {
        const result = await test();
        if (result) {
          passed++;
        } else {
          failed++;
        }
      } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:", error.message);
        failed++;
      }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (this.testToken) {
      await this.cleanup(axios, baseURL, this.testToken);
    }

    console.log("\n" + "=" .repeat(60));
    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π:");
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);

    return { passed, failed, successRate: (passed / (passed + failed)) * 100 };
  }
}

module.exports = UserLevelTests;
