const {
  Achievement,
  UserAchievement,
  User,
  Topic,
  Skill,
  Note,
  SkillCategory,
} = require("../models");
const { Op } = require("sequelize");

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
class AchievementManager {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} actionType - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
   * @param {Object} actionData - –î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  static async checkAchievements(userId, actionType, actionData = {}) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievements = await Achievement.findAll({
        where: { is_active: true },
      });

      for (const achievement of achievements) {
        await this.checkSingleAchievement(
          userId,
          achievement,
          actionType,
          actionData
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async checkSingleAchievement(
    userId,
    achievement,
    actionType,
    actionData
  ) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userAchievement = await UserAchievement.findOne({
        where: {
          user_id: userId,
          achievement_id: achievement.id,
        },
      });

      if (!userAchievement) {
        userAchievement = await UserAchievement.create({
          user_id: userId,
          achievement_id: achievement.id,
          progress: 0,
          is_completed: false,
        });
      }

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (userAchievement.is_completed) {
        return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      const currentProgress = await this.calculateProgress(userId, achievement);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const wasCompleted = userAchievement.is_completed;
      const shouldComplete = currentProgress >= achievement.condition_value;

      await userAchievement.update({
        progress: currentProgress,
        is_completed: shouldComplete,
        completed_at:
          shouldComplete && !wasCompleted
            ? new Date()
            : userAchievement.completed_at,
      });

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –≤—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (shouldComplete && !wasCompleted) {
        console.log(
          `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}!`
        );
        return {
          achieved: true,
          achievement: achievement,
          progress: currentProgress,
        };
      }

      return {
        achieved: false,
        achievement: achievement,
        progress: currentProgress,
      };
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${achievement.name}:`,
        error
      );
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */ static async calculateProgress(userId, achievement) {
    try {
      switch (achievement.type) {
        case "topics_completed":
          return await this.getCompletedTopicsCount(
            userId,
            achievement.condition_data
          );

        case "skills_created":
          return await this.getSkillsCount(userId, achievement.condition_data);

        case "notes_written":
          return await this.getNotesCount(userId, achievement.condition_data);

        case "level_reached":
          return await this.getUserLevel(userId);

        case "categories_mastered":
          return await this.getMasteredCategoriesCount(userId);

        case "first_action":
          return await this.checkFirstAction(
            userId,
            achievement.condition_data
          );
        case "special":
          return await this.checkSpecialAchievement(userId, achievement);

        case "streak_days":
          return await this.getStreakDays(userId);

        default:
          return 0;
      }
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è ${achievement.type}:`,
        error
      );
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
   */
  static async getCompletedTopicsCount(userId, conditionData = {}) {
    const whereConditions = {
      progress: 100,
    };

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if (conditionData && conditionData.category_id) {
      const topics = await Topic.count({
        where: whereConditions,
        include: [
          {
            model: Skill,
            as: "skill",
            where: {
              user_id: userId,
              category_id: conditionData.category_id,
            },
            attributes: [],
          },
        ],
      });
      return topics;
    }

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
    const topics = await Topic.count({
      where: whereConditions,
      include: [
        {
          model: Skill,
          as: "skill",
          where: { user_id: userId },
          attributes: [],
        },
      ],
    });
    return topics;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
   */
  static async getSkillsCount(userId, conditionData = {}) {
    const whereConditions = { user_id: userId };

    if (conditionData && conditionData.category_id) {
      whereConditions.category_id = conditionData.category_id;
    }

    return await Skill.count({ where: whereConditions });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
   */
  static async getNotesCount(userId, conditionData = {}) {
    const notes = await Note.count({
      include: [
        {
          model: Topic,
          as: "topic",
          include: [
            {
              model: Skill,
              as: "skill",
              where: { user_id: userId },
              attributes: [],
            },
          ],
          attributes: [],
        },
      ],
    });
    return notes;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —á–∏—Å–ª–æ
   */
  static async getUserLevel(userId) {
    const user = await User.findByPk(userId, {
      attributes: ["level"],
    });

    if (!user) return 0;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const levelMap = {
      –Ω–æ–≤–∏—á–æ–∫: 1,
      –±–∞–∑–æ–≤—ã–π: 2,
      –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: 3,
      —ç–∫—Å–ø–µ—Ä—Ç: 4,
    };

    return levelMap[user.level] || 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç–æ–ø–∏–∫)
   */
  static async getMasteredCategoriesCount(userId) {
    const categories = await SkillCategory.count({
      include: [
        {
          model: Skill,
          as: "skills",
          where: { user_id: userId },
          include: [
            {
              model: Topic,
              as: "topics",
              where: { progress: 100 },
              attributes: [],
            },
          ],
          attributes: [],
        },
      ],
      distinct: true,
    });
    return categories;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async checkFirstAction(userId, conditionData = {}) {
    const actionType = conditionData.action_type;

    switch (actionType) {
      case "first_skill":
        const skillsCount = await Skill.count({ where: { user_id: userId } });
        return skillsCount > 0 ? 1 : 0;

      case "first_topic":
        const topicsCount = await Topic.count({
          include: [
            {
              model: Skill,
              as: "skill",
              where: { user_id: userId },
              attributes: [],
            },
          ],
        });
        return topicsCount > 0 ? 1 : 0;

      case "first_note":
        const notesCount = await Note.count({
          include: [
            {
              model: Topic,
              as: "topic",
              include: [
                {
                  model: Skill,
                  as: "skill",
                  where: { user_id: userId },
                  attributes: [],
                },
              ],
              attributes: [],
            },
          ],
        });
        return notesCount > 0 ? 1 : 0;

      case "first_completed_topic":
        const completedTopicsCount = await this.getCompletedTopicsCount(userId);
        return completedTopicsCount > 0 ? 1 : 0;

      default:
        return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserAchievements(userId, includeProgress = false) {
    const whereConditions = { user_id: userId };

    if (!includeProgress) {
      whereConditions.is_completed = true;
    }

    const userAchievements = await UserAchievement.findAll({
      where: whereConditions,
      include: [
        {
          model: Achievement,
          as: "achievement",
        },
      ],
      order: [
        ["completed_at", "DESC"],
        ["created_at", "DESC"],
      ],
    });

    return userAchievements;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserAchievementStats(userId) {
    const totalAchievements = await Achievement.count({
      where: { is_active: true },
    });
    const completedAchievements = await UserAchievement.count({
      where: {
        user_id: userId,
        is_completed: true,
      },
    });

    const totalPoints =
      (await UserAchievement.sum("achievement.points", {
        where: { user_id: userId, is_completed: true },
        include: [
          {
            model: Achievement,
            as: "achievement",
            attributes: [],
          },
        ],
      })) || 0;
    return {
      total: totalAchievements,
      completed: completedAchievements,
      percentage:
        totalAchievements > 0
          ? Math.round((completedAchievements / totalAchievements) * 100)
          : 0,
      points: totalPoints,
    };
  }
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */ static async checkSpecialAchievement(userId, achievement) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      switch (achievement.name) {
        case "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å":
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤–∞—Ç–∞—Ä
          const user = await User.findByPk(userId);
          return user && user.avatar ? 1 : 0;

        case "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
          const fullUser = await User.findByPk(userId);
          if (fullUser && fullUser.name && fullUser.email && fullUser.avatar) {
            return 1;
          }
          return 0;

        case "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞":
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ 6:00
          return await this.checkEarlyBirdLogin(userId);

        case "–ü–æ–ª—É–Ω–æ—á–Ω–∏–∫":
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ 23:00
          return await this.checkNightOwlLogin(userId);

        case "–í—ã—Ö–æ–¥–Ω–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç":
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
          return await this.checkWeekendLogin(userId);
        case "–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü":
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–µ—Ä–≤—ã–µ 100
          // –ï—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <= 100, —Ç–æ –æ–Ω —Ç–æ—á–Ω–æ –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö 100
          return userId <= 100 ? 100 : 0;

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –æ–ø—ã—Ç—É
        case "–°—Ç—É–¥–µ–Ω—Ç":
          const totalPoints1 = await this.getUserTotalPoints(userId);
          return totalPoints1 >= 100 ? 1 : 0;

        case "–ë–∞–∫–∞–ª–∞–≤—Ä":
          const totalPoints2 = await this.getUserTotalPoints(userId);
          return totalPoints2 >= 500 ? 1 : 0;

        case "–ú–∞–≥–∏—Å—Ç—Ä":
          const totalPoints3 = await this.getUserTotalPoints(userId);
          return totalPoints3 >= 1000 ? 1 : 0;

        case "–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫":
          const totalPoints4 = await this.getUserTotalPoints(userId);
          return totalPoints4 >= 2500 ? 1 : 0;

        default:
          return 0;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  static async getStreakDays(userId) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–∏–∫–æ–≤
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –Ω–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
      // –ø–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      return 0;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç—Ä–∏–∫–æ–≤:", error);
      return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥ –¥–æ 6:00
   */
  static async checkEarlyBirdLogin(userId) {
    try {
      // –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
      const now = new Date();
      return now.getHours() < 6 ? 1 : 0;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–Ω–Ω–µ–≥–æ –≤—Ö–æ–¥–∞:", error);
      return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥ –ø–æ—Å–ª–µ 23:00
   */
  static async checkNightOwlLogin(userId) {
    try {
      const now = new Date();
      return now.getHours() >= 23 ? 1 : 0;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞:", error);
      return 0;
    }
  }
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
   */
  static async checkWeekendLogin(userId) {
    try {
      const now = new Date();
      const dayOfWeek = now.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 = —Å—É–±–±–æ—Ç–∞
      return dayOfWeek === 0 || dayOfWeek === 6 ? 1 : 0;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ö–æ–¥–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ:", error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserTotalPoints(userId) {
    try {
      const { UserAchievement, Achievement } = require("../models");
      const totalPoints = await UserAchievement.sum("achievement.points", {
        where: {
          user_id: userId,
          is_completed: true,
        },
        include: [
          {
            model: Achievement,
            as: "achievement",
            attributes: [],
          },
        ],
      });
      return totalPoints || 0;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–∏—Ö –æ—á–∫–æ–≤:", error);
      return 0;
    }
  }
}

module.exports = AchievementManager;
