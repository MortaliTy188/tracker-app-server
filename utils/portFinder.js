const net = require("net");

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
 */
class PortFinder {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç
   * @param {number} port - –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω, false –µ—Å–ª–∏ –∑–∞–Ω—è—Ç
   */
  static checkPortAvailable(port) {
    return new Promise((resolve) => {
      const server = net.createServer();

      server.listen(port, () => {
        server.once("close", () => {
          resolve(true);
        });
        server.close();
      });

      server.on("error", () => {
        resolve(false);
      });
    });
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
   * @param {number} startPort - –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000)
   * @param {number} maxAttempts - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
   * @returns {Promise<number>} - –°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
   */
  static async findAvailablePort(startPort = 3000, maxAttempts = 100) {
    for (let port = startPort; port < startPort + maxAttempts; port++) {
      const isAvailable = await this.checkPortAvailable(port);
      if (isAvailable) {
        return port;
      }
    }

    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startPort}-${
        startPort + maxAttempts - 1
      }`
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ
   * @param {number} preferredPort - –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç
   * @returns {Promise<number>} - –°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
   */
  static async getAvailablePort(preferredPort) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ ${preferredPort}...`);

    const isPreferredAvailable = await this.checkPortAvailable(preferredPort);

    if (isPreferredAvailable) {
      console.log(`‚úÖ –ü–æ—Ä—Ç ${preferredPort} —Å–≤–æ–±–æ–¥–µ–Ω`);
      return preferredPort;
    }

    console.log(`‚ö†Ô∏è  –ü–æ—Ä—Ç ${preferredPort} –∑–∞–Ω—è—Ç, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...`);
    const availablePort = await this.findAvailablePort(preferredPort + 1);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: ${availablePort}`);

    return availablePort;
  }
}

module.exports = PortFinder;
