const jwt = require("jsonwebtoken");
const { User, Message, Friendship } = require("../models");
const { Op } = require("sequelize");

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO –¥–ª—è —á–∞—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
class SocketManager {
  constructor(io) {
    this.io = io;
    this.connectedUsers = new Map(); // userId -> socketId
    this.setupSocketEvents();
  }

  setupSocketEvents() {
    this.io.use(this.authenticateSocket.bind(this));

    this.io.on("connection", (socket) => {
      console.log(`üîå User connected: ${socket.userId} (${socket.id})`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.connectedUsers.set(socket.userId, socket.id);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ –æ–Ω–ª–∞–π–Ω
      this.broadcastUserStatus(socket.userId, "online");

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
      socket.on("join_chat", this.handleJoinChat.bind(this, socket));
      socket.on("send_message", this.handleSendMessage.bind(this, socket));
      socket.on("typing_start", this.handleTypingStart.bind(this, socket));
      socket.on("typing_stop", this.handleTypingStop.bind(this, socket));
      socket.on("mark_as_read", this.handleMarkAsRead.bind(this, socket));

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      socket.on("disconnect", () => {
        console.log(`üîå User disconnected: ${socket.userId} (${socket.id})`);
        this.connectedUsers.delete(socket.userId);
        this.broadcastUserStatus(socket.userId, "offline");
      });
    });
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Socket.IO
  async authenticateSocket(socket, next) {
    try {
      console.log("üîê Socket authentication attempt...");
      console.log(
        "üîê Auth token:",
        socket.handshake.auth.token?.substring(0, 20) + "..."
      );
      console.log(
        "üîê Authorization header:",
        socket.handshake.headers.authorization?.substring(0, 30) + "..."
      );

      const token =
        socket.handshake.auth.token ||
        socket.handshake.headers.authorization?.replace("Bearer ", "");

      if (!token) {
        console.log("‚ùå No token provided in socket handshake");
        return next(new Error("Authentication error"));
      }

      // –î–ª—è –¥–µ–º–æ: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "demo-token-user-", –∏–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (token.startsWith("demo-token-user-")) {
        const userId = parseInt(token.replace("demo-token-user-", ""));
        const user = await User.findByPk(userId);

        if (!user) {
          return next(new Error("User not found"));
        }

        socket.userId = user.id;
        socket.user = user;
        next();
        return;
      }

      // –û–±—ã—á–Ω–∞—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log("üîê Attempting JWT verification...");
      const decoded = jwt.verify(token, process.env.JWT_SECRET || "secret_key");
      console.log("üîê JWT decoded, user ID:", decoded.id);

      const user = await User.findByPk(decoded.id);

      if (!user) {
        console.log("‚ùå User not found in database:", decoded.id);
        return next(new Error("User not found"));
      }

      console.log("‚úÖ Socket authentication successful for user:", user.name);
      socket.userId = user.id;
      socket.user = user;
      next();
    } catch (error) {
      console.error("Socket authentication error:", error);
      next(new Error("Authentication error"));
    }
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  async handleJoinChat(socket, data) {
    try {
      const { otherUserId } = data;
      const userId = socket.userId;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–∂–±—É
      const friendship = await Friendship.findOne({
        where: {
          [Op.or]: [
            { requester_id: userId, addressee_id: otherUserId },
            { requester_id: otherUserId, addressee_id: userId },
          ],
          status: "accepted",
        },
      });

      if (!friendship) {
        socket.emit("error", { message: "–ú–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –¥—Ä—É–∑—å—è–º–∏" });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —á–∞—Ç–∞
      const roomName = this.getChatRoomName(userId, otherUserId);
      socket.join(roomName);

      console.log(`üí¨ User ${userId} joined chat room: ${roomName}`);
      socket.emit("chat_joined", { roomName, otherUserId });
    } catch (error) {
      console.error("Error joining chat:", error);
      socket.emit("error", { message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —á–∞—Ç—É" });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Socket.IO
  async handleSendMessage(socket, data) {
    try {
      const { receiverId, content, messageType = "text" } = data;
      const senderId = socket.userId;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–∂–±—É
      const friendship = await Friendship.findOne({
        where: {
          [Op.or]: [
            { requester_id: senderId, addressee_id: receiverId },
            { requester_id: receiverId, addressee_id: senderId },
          ],
          status: "accepted",
        },
      });

      if (!friendship) {
        socket.emit("error", {
          message: "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º",
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const message = await Message.create({
        sender_id: senderId,
        receiver_id: receiverId,
        content: content.trim(),
        message_type: messageType,
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      const messageWithSender = await Message.findByPk(message.id, {
        include: [
          {
            model: User,
            as: "sender",
            attributes: ["id", "name", "avatar"],
          },
        ],
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
      const roomName = this.getChatRoomName(senderId, receiverId);
      this.io.to(roomName).emit("new_message", messageWithSender);

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω, –Ω–æ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const receiverSocketId = this.connectedUsers.get(receiverId);
      if (receiverSocketId) {
        const receiverSocket = this.io.sockets.sockets.get(receiverSocketId);
        if (receiverSocket && !receiverSocket.rooms.has(roomName)) {
          receiverSocket.emit("message_notification", {
            senderId,
            senderName: socket.user.name,
            content: content.substring(0, 100), // –ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
            messageId: message.id,
          });
        }
      }

      console.log(`üí¨ Message sent from ${senderId} to ${receiverId}`);
    } catch (error) {
      console.error("Error sending message:", error);
      socket.emit("error", { message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" });
    }
  }

  // –ù–∞—á–∞–ª–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
  handleTypingStart(socket, data) {
    const { otherUserId } = data;
    const roomName = this.getChatRoomName(socket.userId, otherUserId);

    socket.to(roomName).emit("user_typing", {
      userId: socket.userId,
      userName: socket.user.name,
      isTyping: true,
    });
  }

  // –û–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
  handleTypingStop(socket, data) {
    const { otherUserId } = data;
    const roomName = this.getChatRoomName(socket.userId, otherUserId);

    socket.to(roomName).emit("user_typing", {
      userId: socket.userId,
      userName: socket.user.name,
      isTyping: false,
    });
  }

  // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  async handleMarkAsRead(socket, data) {
    try {
      const { otherUserId, messageIds } = data;
      const userId = socket.userId;

      let updateWhere;
      if (Array.isArray(messageIds) && messageIds.length > 0) {
        updateWhere = {
          id: messageIds,
          sender_id: otherUserId,
          receiver_id: userId,
          is_read: false,
        };
      } else {
        updateWhere = {
          sender_id: otherUserId,
          receiver_id: userId,
          is_read: false,
        };
      }

      await Message.update({ is_read: true }, { where: updateWhere });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
      const roomName = this.getChatRoomName(userId, otherUserId);
      socket.to(roomName).emit("messages_read", {
        readerId: userId,
        messageIds: messageIds || null,
      });

      console.log(`üëÅÔ∏è Messages marked as read by ${userId}`);
    } catch (error) {
      console.error("Error marking messages as read:", error);
      socket.emit("error", { message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π" });
    }
  }

  // –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
  broadcastUserStatus(userId, status) {
    this.io.emit("user_status", {
      userId,
      status,
      timestamp: new Date(),
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —á–∞—Ç–∞
  getChatRoomName(userId1, userId2) {
    const sortedIds = [userId1, userId2].sort();
    return `chat_${sortedIds[0]}_${sortedIds[1]}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  getOnlineUsersCount() {
    return this.connectedUsers.size;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  isUserOnline(userId) {
    return this.connectedUsers.has(userId);
  }
}

module.exports = SocketManager;
